diff -ruN --exclude=.git civicrm-3.2.3/.gitignore civicrm-netivism/.gitignore
--- civicrm-3.2.3/.gitignore	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/.gitignore	2010-12-30 17:38:07.000000000 +0800
@@ -0,0 +1,2 @@
+*.orig
+*.rej
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Contribute/Form/Contribution/Confirm.php civicrm-netivism/CRM/Contribute/Form/Contribution/Confirm.php
--- civicrm-3.2.3/CRM/Contribute/Form/Contribution/Confirm.php	2010-12-30 17:48:13.000000000 +0800
+++ civicrm-netivism/CRM/Contribute/Form/Contribution/Confirm.php	2010-12-30 17:38:07.000000000 +0800
@@ -274,7 +274,7 @@
                  $this->_amount <= 0.0              || $this->_params['is_pay_later'] ||
                  ( $this->_separateMembershipPayment && $this->_amount <= 0.0 ) ) {
                 $contribButton = ts('Continue >>');
-                $this->assign( 'button', 'Continue' );
+                $this->assign( 'button', ts('Continue') );
             } else {
                 $contribButton = ts('Make Contribution');
                 $this->assign( 'button', 'Make Contribution' );
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Contribute/Form/ContributionView.php civicrm-netivism/CRM/Contribute/Form/ContributionView.php
--- civicrm-3.2.3/CRM/Contribute/Form/ContributionView.php	2010-12-30 17:48:13.000000000 +0800
+++ civicrm-netivism/CRM/Contribute/Form/ContributionView.php	2010-12-30 17:38:07.000000000 +0800
@@ -115,7 +115,15 @@
 
         // Get Note
         $noteValue = CRM_Core_BAO_Note::getNote( $values['id'], 'civicrm_contribution' );
-        $values['note'] =  array_values($noteValue);
+        // FIXME need to use civicrm format
+        if(function_exists('_filter_autop')){
+          foreach($noteValue as $v){
+            $values['note'][] = _filter_autop($v);
+          }
+        }
+        else{
+          $values['note'] =  array_values($noteValue);
+        }
 
 		// show billing address location details, if exists
 		if ( CRM_Utils_Array::value( 'address_id', $values ) ) {
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Contribute/Payment/GW.php civicrm-netivism/CRM/Contribute/Payment/GW.php
--- civicrm-3.2.3/CRM/Contribute/Payment/GW.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/CRM/Contribute/Payment/GW.php	2010-12-30 17:38:07.000000000 +0800
@@ -0,0 +1,47 @@
+<?php
+require_once 'CRM/Core/Payment/GW.php';
+
+class CRM_Contribute_Payment_GW extends CRM_Core_Payment_GW {
+    /** 
+     * We only need one instance of this object. So we use the singleton 
+     * pattern and cache the instance in this variable 
+     *
+     * @var object 
+     * @static 
+     */
+    static private $_singleton = null;
+    
+    /**
+     * Constructor
+     *
+     * @param string $mode the mode of operation: live or test
+     *
+     * @return void
+     */
+    function __construct( $mode, &$paymentProcessor ) {
+        parent::__construct( $mode, $paymentProcessor );
+    }
+
+    /**
+     * singleton function used to manage this object
+     *
+     * @param string $mode the mode of operation: live or test
+     *
+     * @return object
+     * @static
+     */
+    static function &singleton( $mode, &$paymentProcessor ) {
+        $processorName = $paymentProcessor['name'];
+        if (self::$_singleton[$processorName] === null ) {
+            self::$_singleton[$processorName] =& new CRM_Contribute_Payment_GW( $mode, $paymentProcessor );
+        }
+        return self::$_singleton[$processorName];
+    }
+    function doTransferCheckout( &$params ) {
+        parent::doTransferCheckout( $params, 'contribute' );
+    }
+    
+}
+
+
+
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Contribute/Payment/Newweb.php civicrm-netivism/CRM/Contribute/Payment/Newweb.php
--- civicrm-3.2.3/CRM/Contribute/Payment/Newweb.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/CRM/Contribute/Payment/Newweb.php	2010-12-30 17:38:07.000000000 +0800
@@ -0,0 +1,62 @@
+<?php
+
+/*
+ * Copyright (C) 2007
+ * Licensed to CiviCRM under the Academic Free License version 3.0.
+ *
+ * Written and contributed by Ideal Solution, LLC (http://www.idealso.com)
+ *
+ */
+
+/**
+ * @package CRM
+ * @author Marshal Newrock <marshal@idealso.com>
+ * $Id: Newweb.php 25823 2010-01-11 09:04:04Z shot $
+ **/
+
+require_once 'CRM/Core/Payment/Newweb.php';
+
+class CRM_Contribute_Payment_Newweb extends CRM_Core_Payment_Newweb {
+    /** 
+     * We only need one instance of this object. So we use the singleton 
+     * pattern and cache the instance in this variable 
+     *
+     * @var object 
+     * @static 
+     */
+    static private $_singleton = null;
+    
+    /**
+     * Constructor
+     *
+     * @param string $mode the mode of operation: live or test
+     *
+     * @return void
+     */
+    function __construct( $mode, &$paymentProcessor ) {
+        parent::__construct( $mode, $paymentProcessor );
+    }
+
+    /**
+     * singleton function used to manage this object
+     *
+     * @param string $mode the mode of operation: live or test
+     *
+     * @return object
+     * @static
+     */
+    static function &singleton( $mode, &$paymentProcessor ) {
+        $processorName = $paymentProcessor['name'];
+        if (self::$_singleton[$processorName] === null ) {
+            self::$_singleton[$processorName] =& new CRM_Contribute_Payment_Newweb( $mode, $paymentProcessor );
+        }
+        return self::$_singleton[$processorName];
+    }
+    function doTransferCheckout( &$params ) {
+        parent::doTransferCheckout( $params, 'contribute' );
+    }
+    
+}
+
+
+
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Core/Payment/BaseIPN.php civicrm-netivism/CRM/Core/Payment/BaseIPN.php
--- civicrm-3.2.3/CRM/Core/Payment/BaseIPN.php	2010-12-30 17:48:13.000000000 +0800
+++ civicrm-netivism/CRM/Core/Payment/BaseIPN.php	2010-12-30 17:38:07.000000000 +0800
@@ -269,7 +269,7 @@
     function pending( &$objects, &$transaction ) {
         $transaction->commit( );
         CRM_Core_Error::debug_log_message( "returning since contribution status is pending" );
-        echo "Success: Returning since contribution status is pending<p>";
+        //echo "Success: Returning since contribution status is pending<p>";
         return true;
     }
 
@@ -323,7 +323,7 @@
         if ( $input['component'] == 'contribute' ) {
             require_once 'CRM/Contribute/BAO/ContributionPage.php';
             CRM_Contribute_BAO_ContributionPage::setValues( $contribution->contribution_page_id, $values );
-            $contribution->source                  = ts( 'Online Contribution' ) . ': ' . $values['title'];
+            $contribution->source = $values['title'];
             
             if ( $values['is_email_receipt'] ) {
                 $contribution->receipt_date = self::$_now;
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Core/Payment/GW.php civicrm-netivism/CRM/Core/Payment/GW.php
--- civicrm-3.2.3/CRM/Core/Payment/GW.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/CRM/Core/Payment/GW.php	2010-12-30 17:38:07.000000000 +0800
@@ -0,0 +1,196 @@
+<?php 
+date_default_timezone_set('Asia/Taipei');
+require_once 'CRM/Core/Payment.php';
+
+class CRM_Core_Payment_GW extends CRM_Core_Payment { 
+    /**
+     * mode of operation: live or test
+     *
+     * @var object
+     * @static
+     */
+    static protected $_mode = null;
+
+    static protected $_params = array();
+
+    /**
+     * Constructor
+     *
+     * @param string $mode the mode of operation: live or test
+     *
+     * @return void
+     */
+    function __construct( $mode, &$paymentProcessor ) {
+      $this->_mode             = $mode;
+      $this->_paymentProcessor = $paymentProcessor;
+      $this->_processorName    = ts('Green World');
+      $config =& CRM_Core_Config::singleton( );
+      $this->_config = $config;
+    }
+
+    function setExpressCheckOut( &$params ) {
+      CRM_Core_Error::fatal( ts( 'This function is not implemented' ) ); 
+    }
+    function getExpressCheckoutDetails( $token ) {
+      CRM_Core_Error::fatal( ts( 'This function is not implemented' ) ); 
+    }
+    function doExpressCheckout( &$params ) {
+      CRM_Core_Error::fatal( ts( 'This function is not implemented' ) ); 
+    }
+    function doDirectPayment( &$params ) {
+      CRM_Core_Error::fatal( ts( 'This function is not implemented' ) );
+    }
+    function checkConfig() {
+      return null;
+    }
+
+    /**  
+     * Sets appropriate parameters for checking out to google
+     *  
+     * @param array $params  name value pair of contribution datat
+     *  
+     * @return void  
+     * @access public 
+     *  
+     */  
+    function doTransferCheckout( &$params, $component ) {
+      $output = '';
+      $component = strtolower( $component );
+      if ( $component != 'contribute' && $component != 'event' ) {
+        CRM_Core_Error::fatal( ts('Component is invalid') );
+      }
+
+      // to see what instrument for newweb
+      //$gw_instrument_id = $params['gw_instrument_id'];
+      //$gw_instrument = $this->getInstrument($gw_instrument_id);
+      $gw_instrument = 'Credit Card';
+
+      $is_pay_later = TRUE;
+      switch($gw_instrument){
+        case 'Credit Card':
+          $output = $this->gwCreditCard($params, $component, $gw_instrument);
+          $is_pay_later = FALSE;
+          break;
+          /*
+        case 'WEBATM':
+        case 'ATM':
+        case 'CS':
+        case 'MMK':
+        case 'ALIPAY':
+          break;
+         */
+      }
+
+      // now process contribution to save some default value
+      /* don't know if we need this. FIXME later
+      require_once 'CRM/Contribute/DAO/Contribution.php';
+      $contribution =& new CRM_Contribute_DAO_Contribution();
+      $contribution->id = $params['contributionID'];
+      $contribution->find(true);
+      if($contribution->payment_instrument_id != $params['gw_instrument_id']){
+        $contribution->payment_instrument_id = $params['gw_instrument_id'];
+      }
+      if($contribution->is_pay_later != $is_pay_later){
+        $contribution->is_pay_later = $is_pay_later;
+      }
+      $contribution->trxn_id = $params['contributionID'];
+      $contribution->save();
+      */
+
+      // record for thank you display
+      /* don't know if we need this. FIXME later.
+      $_SESSION['newweb']['trxn_id'] = $params['contributionID'];
+      $_SESSION['newweb']['is_pay_later'] = $is_pay_later;
+      $_SESSION['newweb']['payment_instrument'] = $newweb_instrument;
+      */
+      
+      print $output;
+      // move things to CiviCRM cache as needed
+      require_once 'CRM/Core/Session.php';
+      CRM_Core_Session::storeSessionObjects( );
+      exit();
+    }
+
+    function gwCreditCard(&$params, $component, $newweb_instrument){
+      $config = $this->_config;
+
+      // notify url for receive payment result
+      $notify_url = $config->userFrameworkResourceURL."extern/gwipn.php?reset=1&contactID={$params['contactID']}"."&contributionID={$params['contributionID']}"."&module={$component}";
+
+      if ( $component == 'event' ) {
+        $notify_url .= "&eventID={$params['eventID']}&participantID={$params['participantID']}";
+      }
+      else {
+        $membershipID = CRM_Utils_Array::value( 'membershipID', $params );
+        if ( $membershipID ) {
+          $notify_url .= "&membershipID=$membershipID";
+        }
+        $relatedContactID = CRM_Utils_Array::value( 'related_contact', $params );
+        if ($relatedContactID) {
+          $notify_url .= "&relatedContactID=$relatedContactID";
+          $onBehalfDupeAlert = CRM_Utils_Array::value( 'onbehalf_dupe_alert', $params );
+          if ($onBehalfDupeAlert) {
+            $notify_url .= "&onBehalfDupeAlert=$onBehalfDupeAlert";
+          }
+        }
+      }
+      // if recurring donations, add a few more items
+      if ( !empty( $params['is_recur']) ) {
+         if ($params['contributionRecurID']) {
+           $notify_url .= "&contributionRecurID={$params['contributionRecurID']}&contributionPageID={$params['contributionPageID']}";
+         }
+         else {
+           CRM_Core_Error::fatal( ts( 'Recurring contribution, but no database id' ) );
+         }
+      }
+
+      // building params
+      $amount = $params['currencyID'] == 'TWD' && strstr($params['amount'], '.') ? substr($params['amount'], 0, strpos($params['amount'],'.')) : $params['amount'];
+      $name = function_exists('truncate_utf8') ? truncate_utf8($params['item_name'], 10) : $params['item_name'];
+      $notify_url .= "&qfKey=".$params['qfKey'];
+
+      $gw_params = array(
+        "client" => $this->_paymentProcessor['user_name'],
+        "od_sob" => $params['contributionID'],
+        "amount" => $amount,
+        "roturl" => $notify_url,
+        "bk_posturl" => $notify_url.'&bk_posturl=1',
+        "qfKey" => $params['qfKey'],
+        "#action" => $this->_paymentProcessor['url_site'],
+      );
+
+      return $this->formRedirect($gw_params);
+    }
+
+    function formRedirect($redirect_params){
+      if(is_array($redirect_params)){
+        $o .= '<form action="'.$redirect_params['#action'].'" name="redirect" method="post" id="redirect-form">';
+        foreach($redirect_params as $k=>$p){
+          if($k[0] != '#'){
+            $o .= '<input type="hidden" name="'.$k.'" value="'.$p.'" />';
+          }
+        }
+        $o .= '</form>';
+      }
+
+      header('Pragma: no-cache');
+      header('Cache-Control: no-store, no-cache, must-revalidate');
+      header('Expires: 0');
+      return '
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"> 
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+<title>'.ts('Redirect to Payment Page').'</title>
+</head>
+<body>
+  '.$o.'
+  <script type="text/javascript">
+  document.forms.redirect.submit();
+  </script>
+</body>
+<html>
+';
+    }
+}
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Core/Payment/GWIPN.php civicrm-netivism/CRM/Core/Payment/GWIPN.php
--- civicrm-3.2.3/CRM/Core/Payment/GWIPN.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/CRM/Core/Payment/GWIPN.php	2010-12-30 17:38:07.000000000 +0800
@@ -0,0 +1,228 @@
+<?php 
+require_once 'CRM/Core/Payment/BaseIPN.php';
+
+class CRM_Core_Payment_GWIPN extends CRM_Core_Payment_BaseIPN {
+  static $_paymentProcessor = null;
+  function __construct( ) {
+    parent::__construct( );
+  }
+
+  static function retrieve( $name, $type, $location = 'POST', $abort = true ) {
+    static $store = null;
+    $value = CRM_Utils_Request::retrieve( $name, $type, $store, false, null, $location );
+    if ( $abort && $value === null ) {
+      CRM_Core_Error::debug_log_message( "Could not find an entry for $name in $location" );
+      echo "Failure: Missing Parameter<p>";
+      exit();
+    }
+    return $value;
+  }
+
+  
+  function error($errorCode = null, $errorMessage = null) {
+    $e =& CRM_Core_Error::singleton( );
+    if ( $errorCode ) {
+      $e->push( $errorCode, 0, null, $errorMessage );
+    } else {
+      $e->push( 9001, 0, null, 'Unknown System Error.' );
+    }
+    return $e;
+  }
+
+
+  function getInput( &$input) {
+    $input['succ'] = self::retrieve('succ', 'Int', 'POST', false);
+    $input['gwsr'] = self::retrieve('gwsr', 'String', 'POST', false);
+    $input['response_code'] = self::retrieve('response_code', 'String', 'POST', false);
+    $input['response_msg'] = self::retrieve('response_msg', 'String', 'POST', false);
+    $input['process_date'] = self::retrieve('process_date', 'String', 'POST', false);
+    $input['process_time'] = self::retrieve('process_time', 'String', 'POST', false);
+    $input['od_sob'] = self::retrieve('od_sob', 'String', 'POST', false);
+    $input['auth_code'] = self::retrieve('auth_code', 'String', 'POST', false);
+    $input['amount'] = self::retrieve('amount', 'Int', 'POST', false);
+    $input['od_hoho'] = self::retrieve('od_hoho', 'String', 'POST', false);
+    $input['eci'] = self::retrieve('eci', 'Int', 'POST', false);
+    $input['red_dan'] = self::retrieve('red_dan', 'Int', 'POST', false);
+    $input['red_de_amt'] = self::retrieve('red_de_amt', 'Int', 'POST', false);
+    $input['red_ok_amt'] = self::retrieve('red_ok_amt', 'Int', 'POST', false);
+    $input['red_yet'] = self::retrieve('red_yet', 'Int', 'POST', false);
+    $input['inspect'] = self::retrieve('inspect', 'String', 'POST', false);
+    $input['spcheck'] = self::retrieve('spcheck', 'Int', 'POST', false);
+    $input['card4no'] = self::retrieve('card4no', 'String', 'POST', false);
+    $input['card6no'] = self::retrieve('card6no', 'String', 'POST', false);
+
+    if($input['od_hoho']) {
+      $hoho = str_replace('<BR>', '<br>', $input['od_hoho']);
+      $hoho_ary = explode('<br>', trim($hoho, '<br>'));
+      $i = 0;
+      $input['od_hoho'] = array();
+      foreach($hoho_ary as $h){
+        if($i==1){
+          $h = str_replace('ha: ', '', $h);
+          list($k, $v) = explode(':',$h);
+          $k = trim($k);
+          $v = trim($v);
+          $input['od_hoho'][$k] = $v;
+        }
+        $i++;
+      }
+    }
+  }
+
+  function getIds( &$ids , $component){
+    $bk_posturl = self::retrieve( 'bk_posturl', 'Integer', 'GET' , false);
+    $ids['contact'] = self::retrieve( 'contactID', 'Integer', 'GET' , true);
+    $ids['contribution'] = self::retrieve( 'contributionID', 'Integer', 'GET' , true);
+    if ( $component == 'event' ) {
+      $ids['event'] = self::retrieve( 'eventID'      , 'Integer', 'GET', true );
+      $ids['participant'] = self::retrieve( 'participantID', 'Integer', 'GET', true );
+    }
+    else {
+      $ids['membership'] = self::retrieve( 'membershipID'       , 'Integer', 'GET', false );
+      $ids['contributionRecur'] = self::retrieve( 'contributionRecurID', 'Integer', 'GET', false );
+      $ids['contributionPage'] = self::retrieve( 'contributionPageID' , 'Integer', 'GET', false );
+      $ids['related_contact'] = self::retrieve( 'relatedContactID'   , 'Integer', 'GET', false );
+      $ids['onbehalf_dupe_alert'] = self::retrieve( 'onBehalfDupeAlert'  , 'Integer', 'GET', false );
+    }
+  }
+
+  // Greenworld check 
+  function gwSpcheck($process_time,$gwsr,$amount,$spcheck,$check_sum) {    
+    $T = $process_time+$gwsr+$amount;	
+    $a = substr($T,0,1).substr($T,2,1).substr($T,4,1);
+    $b = substr($T,1,1).substr($T,3,1).substr($T,5,1);
+    $c = ( $check_sum % $T ) + $check_sum + $a + $b;
+
+    if($spcheck == $c) {
+      return TRUE;
+    }
+    else {
+      return FALSE;
+    }  
+  }
+
+  function validateOthers( &$input, &$ids, &$objects, &$transaction, &$note){
+    $contribution = &$objects['contribution'];
+    $pass = TRUE;
+    
+    // check contribution id matches
+    if ( $contribution->id != $input['od_sob'] ) {
+      CRM_Core_Error::debug_log_message( "OrderNumber values doesn't match between database and IPN request" );
+      $note .= ts("Failuare: OrderNumber values doesn't match between database and IPN request")."\n";
+      $pass = FALSE;
+    } 
+
+    // check amount
+    if ($ids['contributionRecur']) {
+      $contribution->total_amount = $input['amount'];
+    }
+    elseif ( $contribution->total_amount != $input['amount'] ) {
+      CRM_Core_Error::debug_log_message( "Amount values dont match between database and IPN request" );
+      $note .= ts("Failuare: Amount values dont match between database and IPN request")."\n";
+      $pass = FALSE;
+    }
+
+    // checksum
+    $signature = $objects['paymentProcessor']['signature'];
+    if(! $this->gwSpcheck($input["process_time"],$input["gwsr"],$input["amount"],$input["spcheck"], $signature) ){
+      CRM_Core_Error::debug_log_message( "Checksum Error" );
+      $note .= ts("Failuare: Transaction number and system response number doesn't match. Please contact us for further assistant.")."\n";
+      $this->failed( $objects, $transaction );
+      $pass = FALSE;
+    }
+
+    // process fail response
+    if(!$input['succ']){
+      $response_code = $input['response_code'];
+      $response_msg = $input['response_msg'];
+      $this->failed( $objects, $transaction );
+      $pass = FALSE;
+    }
+
+    return $pass;
+  }
+
+
+  function addNote($note, &$contribution){
+    require_once 'CRM/Core/BAO/Note.php';
+    $note = date("Y/m/d H:i:s"). ts("Transaction record").": \n".$note."\n===============================\n";
+    $note_exists = CRM_Core_BAO_Note::getNote( $contribution->id, 'civicrm_contribution' );
+    if(count($note_exists)){
+      $note_id = array( 'id' => reset(array_keys($note_exists)) );
+      $note = $note . reset($note_exists);
+    }
+    else{
+      $note_id = NULL;
+    }
+    
+    $noteParams = array(
+      'entity_table'  => 'civicrm_contribution',
+      'note'          => $note,
+      'entity_id'     => $contribution->id,
+      'contact_id'    => $contribution->contact_id,
+      'modified_date' => date('Ymd')
+    );
+    CRM_Core_BAO_Note::add( $noteParams, $note_id );
+  }
+
+  function go( &$input, &$ids, &$objects, &$transaction, $note) {
+    $contribution =& $objects['contribution'];
+
+    //$contribution->receive_date = date('YmdHis');
+    $input['trxn_id'] = $contribution->id;
+    $this->completeTransaction( $input, $ids, $objects, $transaction, $recur );
+
+    $note .= ts('Completed')."\n";
+    $this->addNote($note, $contribution);
+    return TRUE;
+  }
+
+  function main(  $component = 'contribute'  ){
+    $civi_base_url = $component == 'event' ? 'civicrm/event/register' : 'civicrm/contribute/transact';
+    $qfKey = $_GET['qfKey'] ? $_GET['qfKey'] : $input['od_hoho']['qfKey'];
+
+    // get the contribution and contact ids from the GET params
+    require_once 'CRM/Utils/Request.php';
+    $objects = $ids = $input = array();
+    $input['component'] = $component;
+    $this->getInput( $input);
+    $this->getIds($ids, $component);
+    
+    // now, retrieve full object by validateData, or false fallback
+    if ( ! $this->validateData( $input, $ids, $objects ) ) {
+      return false;
+    }
+    // set global variable for paymentProcessor
+    self::$_paymentProcessor =& $objects['paymentProcessor'];
+
+    if($objects['contribution']->contribution_status_id == 1){
+      // already completed. skip and redirect to thank you page
+      $redirect = CRM_Utils_System::url($civi_base_url,"_qf_ThankYou_display=true&qfKey={$qfKey}", false, null, false);
+    }
+    else{
+      // start validation
+      require_once 'CRM/Core/Transaction.php';
+      $transaction = new CRM_Core_Transaction();
+      $note = '';
+      if( $this->validateOthers($input, $ids, $objects, $transaction, $note) ){
+        if( $this->go($input, $ids, $objects, $transaction, $note) ){
+          $redirect = CRM_Utils_System::url($civi_base_url,"_qf_ThankYou_display=true&qfKey={$qfKey}", false, null, false);
+        }
+      }
+    }
+
+    if($bk_posturl){
+      echo 'Done.';
+    }
+    else{
+      // provide error url
+      $error_base_url =  $component == 'event' ? 'civicrm/event/confirm' : 'civicrm/contribute/transact';
+      $error_argument = $component == 'event' ? "reset=1&cc=fail&participantId={$ids['participant']}" : "_qf_Main_display=1&cancel=1&qfKey=$qfKey";
+      if(!$redirect){ // error or not success.
+        $redirect = CRM_Utils_System::url($error_base_url, $error_argument, false, null, false);
+        //$error = self::error($input['response_code'], $input['response_msg']);
+      }
+      CRM_Utils_System::redirect($redirect);
+    }
+  }
+}
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Core/Payment/Newweb.php civicrm-netivism/CRM/Core/Payment/Newweb.php
--- civicrm-3.2.3/CRM/Core/Payment/Newweb.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/CRM/Core/Payment/Newweb.php	2010-12-30 17:38:07.000000000 +0800
@@ -0,0 +1,453 @@
+<?php
+date_default_timezone_set('Asia/Taipei');
+require_once 'CRM/Core/Payment.php';
+require_once 'CRM/Core/Payment/NewwebResponse.php';
+
+class CRM_Core_Payment_Newweb extends CRM_Core_Payment {
+
+    static protected $_mode = null;
+
+    static protected $_params = array();
+    
+    /**
+     * Constructor
+     *
+     * @param string $mode the mode of operation: live or test
+     *
+     * @return void
+     */
+    function __construct( $mode, &$paymentProcessor ) {
+      $this->_mode             = $mode;
+      $this->_paymentProcessor = $paymentProcessor;
+      $this->_processorName    = ts('Newweb');
+      $config =& CRM_Core_Config::singleton( );
+      $this->_config = $config;
+    }
+
+    function setExpressCheckOut( &$params ) {
+      CRM_Core_Error::fatal( ts( 'This function is not implemented' ) ); 
+    }
+    function getExpressCheckoutDetails( $token ) {
+      CRM_Core_Error::fatal( ts( 'This function is not implemented' ) ); 
+    }
+    function doExpressCheckout( &$params ) {
+      CRM_Core_Error::fatal( ts( 'This function is not implemented' ) ); 
+    }
+    function doDirectPayment( &$params ) {
+      CRM_Core_Error::fatal( ts( 'This function is not implemented' ) );
+    }
+    function checkConfig() {
+      return null;
+    }
+
+    function doTransferCheckout(&$params, $component) {
+      $component = strtolower( $component );
+      if ( $component != 'contribute' && $component != 'event' ) {
+        CRM_Core_Error::fatal( ts('Component is invalid') );
+      }
+
+      // to see what instrument for newweb
+      $newweb_instrument_id = $params['newweb_instrument_id'];
+      $newweb_instrument = $this->getInstrument($newweb_instrument_id);
+      
+      $is_pay_later = TRUE;
+      switch($newweb_instrument){
+        case 'Credit Card':
+          $redirect = $this->newwebCreditCard($params, $component, $newweb_instrument);
+          $is_pay_later = FALSE;
+          break;
+        case 'WEBATM':
+        case 'ATM':
+        case 'CS':
+        case 'MMK':
+        case 'ALIPAY':
+          $redirect = $this->newwebEZPay($params, $component, $newweb_instrument);
+          break;
+      }
+
+      // now process contribution to save some default value
+      require_once 'CRM/Contribute/DAO/Contribution.php';
+      $contribution =& new CRM_Contribute_DAO_Contribution();
+      $contribution->id = $params['contributionID'];
+      $contribution->find(true);
+      if($contribution->payment_instrument_id != $params['newweb_instrument_id']){
+        $contribution->payment_instrument_id = $params['newweb_instrument_id'];
+      }
+      if($contribution->is_pay_later != $is_pay_later){
+        $contribution->is_pay_later = $is_pay_later;
+      }
+      $contribution->trxn_id = $params['contributionID'];
+      $contribution->save();
+
+      // record for thank you display
+      $_SESSION['newweb']['trxn_id'] = $params['contributionID'];
+      $_SESSION['newweb']['is_pay_later'] = $is_pay_later;
+      $newweb_instrument_label = $this->getInstrument($newweb_instrument_id, 'label');
+      $_SESSION['newweb']['payment_instrument'] = $newweb_instrument_label;
+
+      // doing redirect
+      CRM_Utils_System::redirect($redirect);
+    }
+
+    function newwebCreditCard(&$params, $component, $newweb_instrument){
+      $config = $this->_config;
+      $civi_base_url = $component == 'event' ? 'civicrm/event/register' : 'civicrm/contribute/transact';
+      $cancel_url = CRM_Utils_System::url($civi_base_url,"_qf_Confirm_display=true&qfKey={$params['qfKey']}",false, null, false );
+      $return_url = CRM_Utils_System::url($civi_base_url,"_qf_ThankYou_display=1&qfKey={$params['qfKey']}",true, null, false );
+
+      // notify url for receive payment result
+      $notify_url = $config->userFrameworkResourceURL."extern/newwebipn.php?reset=1&contactID={$params['contactID']}"."&contributionID={$params['contributionID']}"."&module={$component}";
+
+      if ( $component == 'event' ) {
+        $notify_url .= "&eventID={$params['eventID']}&participantID={$params['participantID']}";
+      }
+      else {
+        $membershipID = CRM_Utils_Array::value( 'membershipID', $params );
+        if ( $membershipID ) {
+          $notify_url .= "&membershipID=$membershipID";
+        }
+        $relatedContactID = CRM_Utils_Array::value( 'related_contact', $params );
+        if ($relatedContactID) {
+          $notify_url .= "&relatedContactID=$relatedContactID";
+          $onBehalfDupeAlert = CRM_Utils_Array::value( 'onbehalf_dupe_alert', $params );
+          if ($onBehalfDupeAlert) {
+            $notify_url .= "&onBehalfDupeAlert=$onBehalfDupeAlert";
+          }
+        }
+      }
+      // if recurring donations, add a few more items
+      if ( !empty( $params['is_recur']) ) {
+         if ($params['contributionRecurID']) {
+           $notify_url .= "&contributionRecurID={$params['contributionRecurID']}&contributionPageID={$params['contributionPageID']}";
+         }
+         else {
+           CRM_Core_Error::fatal( ts( 'Recurring contribution, but no database id' ) );
+         }
+      }
+      else {
+      }
+
+      // building params
+      $amount = $params['currencyID'] == 'TWD' && strstr($params['amount'], '.') ? substr($params['amount'], 0, strpos($params['amount'],'.')) .'.00' : $params['amount'];
+      $name = function_exists('truncate_utf8') ? truncate_utf8($params['item_name'], 10) : $params['item_name'];
+
+      $newweb_params = array(
+        "MerchantNumber" => $this->_paymentProcessor['user_name'],
+        "OrderNumber"    => $params['contributionID'],
+        "Amount"         => $amount,
+        "OrgOrderNumber" => $params['contributionID'],
+        "ApproveFlag"    => 1,
+        "DepositFlag"    => $params['is_recur'] ? 1 : 0,
+        "Englishmode"    => 0,
+        "OrderURL"       => $notify_url,
+        "ReturnURL"      => $return_url,
+        "checksum"       => md5($this->_paymentProcessor['user_name'].$params['contributionID'].$this->_paymentProcessor['signature'].$amount),
+        "op"             => "AcceptPayment",
+        "#action"        => $this->_paymentProcessor['url_site'],
+        "#params"         => $params,
+        "#paymentProcessor" => $this->_paymentProcessor,
+        "#redirect" => $_SERVER['HTTP_REFERER'],
+      );
+      $_SESSION['newweb_form'] = $newweb_params;
+
+      $redirect = CRM_Utils_System::url("civicrm_newweb?qfKey={$params['qfKey']}");
+      return $redirect;
+    }
+
+    function newwebEZPay(&$params, $component, $newweb_instrument){
+      require_once 'CRM/Contact/DAO/Contact.php';
+      $contact =& new CRM_Contact_DAO_Contact( );
+      $contact->id = $params['contact'];
+      $contact->find(true);
+
+      if(strpos($params['amount'],'.') ){
+        $amount = substr($params['amount'], 0, strpos($params['amount'],'.'));
+      }
+      else{
+        $amount = $params['amount'];
+      }
+      
+      $post = array();
+      $post['merchantnumber'] = $this->_paymentProcessor['password'];
+      $post['ordernumber'] = $params['contributionID'];
+      $post['amount'] = $amount;
+      $post['paymenttype'] = $newweb_instrument;
+      $post['paytitle'] = $params['item_name'];
+      $post['bankid'] = '004';
+      $post['duedate'] = date('Ymd', time()+86400*7);
+      if($newweb_instrument == 'CS'){
+        $post['payname'] = $params['last_name']." ".$params['first_name'];
+        $post['payphone'] = preg_replace("/[^\d]+/i", $params['phone']);
+      }
+      $post['returnvalue'] = 1;
+      $post['hash'] = md5($post['merchantnumber'].$this->_paymentProcessor['url_button'].$amount.$post['ordernumber']);
+      $civi_base_url = $component == 'event' ? 'civicrm/event/register' : 'civicrm/contribute/transact';
+      $post['nexturl'] = CRM_Utils_System::url($civi_base_url,"_qf_ThankYou_display=1&qfKey={$params['qfKey']}",true, null, false );
+    
+      $post["#redirect"] = $_SERVER['HTTP_REFERER'];
+      $post["#params"] = $params;
+      $post["#action"] = rtrim($this->_paymentProcessor['url_api'],'/')."/Payment";
+      $post["#paymentProcessor"] = $this->_paymentProcessor;
+      $post['returnvalue'] = 0;
+      $_SESSION['newweb_form'] = $post;
+      $redirect = CRM_Utils_System::url("civicrm_newweb?qfKey={$params['qfKey']}&instrument=$newweb_instrument");   
+      return $redirect;
+      /*
+      if($newweb_instrument == 'WEBATM' || $newweb_instrument == 'CS' || $newweb_instrument == 'MMK'){
+        $post["#redirect"] = $_SERVER['HTTP_REFERER'];
+        $post["#params"] = $params;
+        $post["#action"] = rtrim($this->_paymentProcessor['url_api'],'/')."/Payment";
+        $post["#paymentProcessor"] = $this->_paymentProcessor;
+        $post['returnvalue'] = 0;
+        $_SESSION['newweb_form'] = $post;
+        $redirect = CRM_Utils_System::url("civicrm_newweb?qfKey={$params['qfKey']}&instrument=$newweb_instrument");   
+        return $redirect;
+      }
+      else{
+        $result = $this->postData($post);
+      }
+
+      if($result === FALSE){
+        // false message here.
+      }
+      else{
+        // checksum
+        if($this->checkSum($result)){
+          if($newweb_instrument == 'ATM'){
+            $result_note = $newweb_instrument. ' ('.$result['bankid'].ts('Taiwan Bank').', '.ts('Account Number').': '.$result['virtualaccount'].')';
+            $_SESSION['newweb']['payment_instrument'] = $result_note;
+            $this->addNote($result_note, $params);
+            dpm($result_note);
+          }
+        }
+        else{
+          dpm('error here');
+        }
+      }
+
+      $redirect = CRM_Utils_System::url($civi_base_url,"_qf_ThankYou_display=1&qfKey={$params['qfKey']}",true,null,false);
+      return $redirect;
+      */
+    }
+
+    function vars2array($str){
+      $vars = explode('&', $str);
+      foreach($vars as $var){
+        list($name, $value) = explode('=', $var, 2);
+        if($name == 'errormessage'){
+          $value = iconv("Big5","UTF-8",$value);
+        }
+        $params[$name] = $value;
+      }
+      return $params;
+    }
+
+    function vars2str($post){
+      $array = array();
+      foreach($post as $name => $value){
+        if($value){
+          $array[] = $name."=".urlencode($value);
+        }
+      }
+      return implode('&', $array);
+    }
+
+    function postData($post, $type = 0){
+      $postdata = $this->vars2str($post);
+      $payment_url = rtrim($this->_paymentProcessor['url_api'],'/')."/Payment";
+      $query_url = rtrim($this->_paymentProcessor['url_api'],'/')."/Query"; 
+
+      $url = $type ? $query_url : $payment_url;
+
+      $ch = curl_init($url);
+      curl_setopt($ch, CURLOPT_POST, 1);
+      curl_setopt($ch, CURLOPT_POSTFIELDS, $postdata);
+//      curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
+      curl_setopt($ch, CURLOPT_HEADER, 0);  // DO NOT RETURN HTTP HEADERS
+      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);  // RETURN THE CONTENTS OF THE CALL
+      $receive = curl_exec($ch);
+      if(curl_errno($ch)){
+        $ch2 = curl_init($url);
+        curl_setopt($ch2, CURLOPT_POST, 1);
+        curl_setopt($ch2, CURLOPT_POSTFIELDS, $postdata);
+//        curl_setopt($ch2, CURLOPT_FOLLOWLOCATION, 1);
+        curl_setopt($ch2, CURLOPT_HEADER, 0);  // DO NOT RETURN HTTP HEADERS
+        curl_setopt($ch2, CURLOPT_RETURNTRANSFER, 1);  // RETURN THE CONTENTS OF THE CALL
+        $receive = curl_exec($ch2);
+      }
+      curl_close($ch);
+
+      if($receive){
+        $vars = $this->vars2array($receive);
+        if($vars['rc'] == 70){
+          $regetorder = curl_init($query_url);
+          $post['operation'] = "regetorder";
+          $postdata = $this->vars2str($post);
+          curl_setopt($regetorder, CURLOPT_POST, 1);
+          curl_setopt($regetorder, CURLOPT_POSTFIELDS, $postdata);
+//          curl_setopt($regetorder, CURLOPT_FOLLOWLOCATION, 1);
+          curl_setopt($regetorder, CURLOPT_HEADER, 0);
+          curl_setopt($regetorder, CURLOPT_RETURNTRANSFER, 1);
+          $receive2 = curl_exec($regetorder);
+          curl_close($regetorder);
+          $vars2 = $this->vars2array($receive2);
+          return $vars2;
+        }
+        return $vars;
+      }
+      else{
+        return FALSE;
+      }
+    }
+
+    function checkSum($array){
+      $checksum = $array['checksum'];
+      unset($array['checksum']);
+      foreach($array as $n => $v){
+        $str .= $n."=".$v.'&';
+      }
+      $str .= 'code='.$this->_paymentProcessor['url_button'];
+      if($checksum == md5($str)){
+        return TRUE;
+      }
+      else{
+        return FALSE;
+      }
+    }
+
+    function addNote($note, &$params){
+      require_once 'CRM/Core/BAO/Note.php';
+      $note = date("Y/m/d H:i:s")." ". ts("Transaction record").": \n".$note."\n===============================\n";
+      $note_exists = CRM_Core_BAO_Note::getNote( $params['contributionID'], 'civicrm_contribution' );
+      if(count($note_exists)){
+        $note_id = array( 'id' => reset(array_keys($note_exists)) );
+        $note = $note . reset($note_exists);
+      }
+      else{
+        $note_id = NULL;
+      }
+      
+      $noteParams = array(
+        'entity_table'  => 'civicrm_contribution',
+        'note'          => $note,
+        'entity_id'     => $params['contributionID'],
+        'contact_id'    => $params['contactID'],
+      );
+      CRM_Core_BAO_Note::add( $noteParams, $note_id );
+    }
+
+    function getInstrument($id = NULL, $type = 'name'){
+      static $instruments;
+      if(empty($instruments)){
+        require_once "CRM/Core/DAO.php";
+        $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_option_group cog INNER JOIN civicrm_option_value cov ON cog.id = cov.option_group_id WHERE cog.name LIKE 'payment_instrument' AND (cov.value = 1 OR cov.filter != 0 ) ORDER BY cov.value ASC");
+        while($dao->fetch()){
+          $instruments[$dao->value] = array('name' => $dao->name, 'label' => $dao->label);
+        }
+      }
+
+      if(is_numeric($id)){
+        return $instruments[$id][$type];
+      }
+      else{
+        return $instruments;
+      }
+    }
+
+    function notify($contact, $content){
+    
+    }
+
+    function cron(){
+      require_once 'CRM/Contribute/DAO/Contribution.php';
+      require_once 'CRM/Core/Payment/BaseIPN.php';
+      require_once 'CRM/Core/Transaction.php';
+      require_once "CRM/Core/DAO.php";
+
+      print "Strat to process:$this->_mode \n=========================== \n"; 
+
+      $instruments = $this->getInstrument();
+      unset($instruments[1]);
+      $instrument_str = implode(',', array_keys($instruments));
+      $time = date('YmdHis');
+      $is_test = $this->_mode == 'test' ? 1 : 0;
+      $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_contribution WHERE contribution_status_id = 2 AND payment_instrument_id IN ($instrument_str) AND is_test = $is_test ORDER BY RAND() LIMIT 0, 6");
+      while($dao->fetch()){
+        $post = array();
+        $post['merchantnumber'] = $this->_paymentProcessor['password'];
+        $post['ordernumber'] = $dao->id;
+        //$post['amount'] = (int)$dao->total_amount;
+        //$post['paymenttype'] = $instruments[$dao->payment_instrument_id]['name'];
+        //$post['status'] = 0;
+        $post['operation'] = 'queryorders';
+        $post['time'] = $time;
+        $post['hash'] = md5($post['operation'].$this->_paymentProcessor['url_button'].$time);
+
+        // initialize objects and ids
+        $input = $object = $ids = $result = array();
+        $note = '';
+        $c =& new CRM_Contribute_DAO_Contribution();
+        $c->id = $post['ordernumber'];
+        $c->find(true);
+        $note_array = array(
+          'contributionID' => $c->id,
+          'contactID' => $c->contact_id,
+        );
+        $ipn = & new CRM_Core_Payment_BaseIPN();
+        $transaction = new CRM_Core_Transaction();
+        $ids['contact'] = $c->contact_id;
+        $ids['contribution'] = $c->id;
+        $input['component'] = 'contribute'; // FIXME need to detect mode of contribute or event
+
+        // fetch result and object
+        $result = $this->postData($post, 1);
+        // debug here
+        print $c->id."\n";
+        print_r($post);
+        print_r($result);
+        // 
+        if($ipn->validateData($input, $ids, $objects) && $result){
+          // check result
+          if($result['rc'] == 0 && $result['status'] == 1){
+            // after validate, start to complete some transaction
+            $input['trxn_id'] = $c->trxn_id;
+            $input['payment_instrument_id'] = $c->payment_instrument_id;
+            $input['check_number'] = $result['writeoffnumber'];
+            $input['amount'] = $result['amount'];
+            if($result['timepaid']){
+              $objects['contribution']->receive_date = $result['timepaid'];
+            }
+            else{
+              $objects['contribution']->receive_date = date('YmdHis');
+            }
+            $ipn->completeTransaction($input, $ids, $objects, $transaction);
+
+            // note here;
+            $note .= ts("Serial number").": ".$result['serialnumber']."\n";
+            $note .= ts("Payment Instrument").": ". $result['paymenttype'];
+            $note .= ts("External order number").": ".$result['writeoffnumber']."\n";
+            $note .= ts("Create date").": ".$result['timecreated']."\n";
+            $note .= ts("Paid date").": ".$result['timepaid']."\n";
+            $note .= ts("Pay count").": ".$result['paycount']."\n";
+            $note .= ts("Completed");
+            $this->addNote($note, $note_array);
+          }
+          elseif(!isset($result['status']) && $result['rc'] == 0) {
+            // cancel contribution
+            $input['reasonCode'] = ts('Overdue');
+            $input['trxn_id'] = $c->trxn_id;
+            $input['payment_instrument_id'] = $c->payment_instrument_id;
+            $ipn->cancelled($objects, $transaction);
+            $note .= ts("Canceled").": ".ts('Overdue')."\n";
+            $this->addNote($note, $note_array);
+          }
+          elseif($result['rc']){
+            // FIXME to see if cancel contribution
+            $note .= ts("Error").": ".$result['rc']."/".$result['rc2']."\n";
+            $this->addNote($note, $note_array);
+          }
+        }
+      }
+    }
+}
+
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Core/Payment/NewwebIPN.php civicrm-netivism/CRM/Core/Payment/NewwebIPN.php
--- civicrm-3.2.3/CRM/Core/Payment/NewwebIPN.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/CRM/Core/Payment/NewwebIPN.php	2010-12-30 17:38:07.000000000 +0800
@@ -0,0 +1,281 @@
+<?php
+define("NEWWEB_RECUR_DAY", 20); // day of month
+require_once 'CRM/Core/Payment/BaseIPN.php';
+require_once "CRM/Core/DAO.php";
+
+class CRM_Core_Payment_NewwebIPN extends CRM_Core_Payment_BaseIPN {
+    static $_paymentProcessor = null;
+
+    function __construct( ) {
+        parent::__construct( );
+    }
+
+    static function retrieve( $name, $type, $location = 'POST', $abort = true ) 
+    {
+        static $store = null;
+        $value = CRM_Utils_Request::retrieve( $name, $type, $store,
+                                              false, null, $location );
+        if ( $abort && $value === null ) {
+            CRM_Core_Error::debug_log_message( "Could not find an entry for $name in $location" );
+            echo "Failure: Missing Parameter<p>";
+            exit();
+        }
+        return $value;
+    }
+
+    function getInput( &$input) {
+      $input['CheckSum'] = self::retrieve('CheckSum', 'String', 'POST', false);
+      $input['PRC'] = self::retrieve('PRC', 'Int', 'POST', true);
+      $input['SRC'] = self::retrieve('SRC', 'Int', 'POST', true);
+      $input['ApprovalCode'] = self::retrieve('ApprovalCode', 'String', 'POST', false);
+      $input['BankResponseCode'] = self::retrieve('BankResponseCode', 'String', 'POST', false);
+      $input['MerchantNumber'] = self::retrieve('MerchantNumber', 'String', 'POST', true);
+      $input['OrderNumber'] = self::retrieve('OrderNumber', 'String', 'POST', true);
+      $input['Amount'] = self::retrieve('Amount', 'String', 'POST', true);
+      $input['amount'] = $input['Amount'];
+      $input['BatchNumber'] = self::retrieve('BatchNumber', 'String', 'POST', false);
+    }
+
+    function addNote($note, &$contribution){
+      require_once 'CRM/Core/BAO/Note.php';
+      $note = date("Y/m/d H:i:s"). ts("Transaction record").": \n".$note."\n===============================\n";
+      $note_exists = CRM_Core_BAO_Note::getNote( $contribution->id, 'civicrm_contribution' );
+      if(count($note_exists)){
+        $note_id = array( 'id' => reset(array_keys($note_exists)) );
+        $note = $note . reset($note_exists);
+      }
+      else{
+        $note_id = NULL;
+      }
+      
+      $noteParams = array(
+        'entity_table'  => 'civicrm_contribution',
+        'note'          => $note,
+        'entity_id'     => $contribution->id,
+        'contact_id'    => $contribution->contact_id,
+        'modified_date' => date('Ymd')
+      );
+      CRM_Core_BAO_Note::add( $noteParams, $note_id );
+    }
+
+    function recur( &$input, &$ids, &$objects) {
+      // check contribution first.
+      $contribution =& $objects['contribution'];
+      $order_num = $contribution->id;
+      $note = $note ? $note : '';
+      $failed = false;
+
+      if ( $order_num != $input['OrderNumber'] ) {
+        CRM_Core_Error::debug_log_message( "OrderNumber values doesn't match between database and IPN request" );
+        $note .= ts("Failuare: OrderNumber values doesn't match between database and IPN request")."\n";
+        $failed = true;
+      } 
+
+      if ( $contribution->total_amount != $input['amount'] ) {
+        CRM_Core_Error::debug_log_message( "Amount values dont match between database and IPN request" );
+        $note .= ts("Failuare: Amount values dont match between database and IPN request")."\n";
+        $failed = true;
+      }
+      else {
+        $contribution->total_amount = $input['amount'];
+      }
+
+      require_once 'CRM/Core/Transaction.php';
+      $transaction = new CRM_Core_Transaction();
+
+      $participant =& $objects['participant'];
+      $membership  =& $objects['membership' ];
+
+      $signature = $objects['paymentProcessor']['signature'];
+      $checksum = md5($input['MerchantNumber'].$input['OrderNumber'].$input['PRC'].$input['SRC'].$signature.$input['Amount']);
+      if($checksum != $input['CheckSum']){
+        CRM_Core_Error::debug_log_message( "Checksum Error" );
+        $note .= ts("Failuare: Transaction number and system response number doesn't match. Please contact us for further assistant.")."\n";
+        $this->failed( $objects, $transaction );
+        $failed = true;
+      }
+
+      if($input['PRC'] || $input['SRC']){
+        require_once('CRM/Core/Payment/NewwebResponse.php');
+        $e = new CRM_Core_Payment_NewwebResponse;
+        $error = $e->response($input['PRC'], $input['SRC'], $input['BankResponseCode']);
+        $note .= implode("\n",$error);
+        $note .= " (Error code: PRC-{$input['PRC']},SRC-{$input['SRC']},BRC-{$input['BRC']})\n";
+        $this->failed( $objects, $transaction );
+        $failed = true;
+      }
+      $this->addNote($note, $contribution);
+
+      // start recuring
+      $recur =& $objects['contributionRecur'];
+      if($failed){
+        CRM_Core_Error::debug_log_message( "Cancel recurring immediately." );
+        $recur->cancel_date = date('YmdHis');
+        $recur->save();
+      }
+      else{
+        require_once 'CRM/Core/Payment.php';
+        CRM_Core_Error::debug_log_message( "Start building recurring object." );
+
+        // caculate date of recurring contrib
+        $order_num = $objects['contribution']->id;
+        $time = time();
+        $now = date( 'YmdHis', $time);
+        // fix dates that already exist
+        $dates = array('create', 'start', 'end', 'cancel', 'modified');
+        foreach($dates as $date) {
+          $name = "{$date}_date";
+          if ( $recur->$name ) {
+            $recur->$name = CRM_Utils_Date::isoToMysql( $recur->$name );
+          }
+        }
+
+        // building recurring object stuff
+        $recur->processor_id = $objects['paymentProcessor']->id;
+
+        // caculate end_date
+        $recur->create_date = $recur->create_date ? $recur->create_date : $now;
+        $recur->modified_date =  $now;
+        $installments_total = $recur->installments - 1;
+
+        // every recuring contrib start on next month
+        $month_now = date('n');
+        $day_now = date('j');
+        if($day_now > (NEWWEB_RECUR_DAY - 2) ){
+          $month = $month_now == 12 ? 1 : $month_now +1;
+        }
+        else{
+          $month = $month_now;
+        }
+        $year = $month_now == 12 ? date('Y') + 1  : date('Y');
+        $next_recur = mktime(0,0,0, $month, NEWWEB_RECUR_DAY, $year);
+        $end_recur = strtotime('+'.$installments_total.' month', $next_recur);
+        $end_recur = mktime(0,0,0, date('n', $end_recur), NEWWEB_RECUR_DAY, date('Y', $end_recur));
+
+        $recur->next_sched_contribution = date('YmdHis', $next_recur);
+        $recur->start_date = $recur->next_sched_contribution;
+        $recur->end_date = date('YmdHis', $end_recur);
+        $recur->cycle_day = NEWWEB_RECUR_DAY;
+        $recur->save();
+        CRM_Core_Error::debug_log_message( "Done the recurring object save." );
+        CRM_Core_DAO::executeQuery("INSERT INTO civicrm_contribution_newweb_recur (recur_id,order_num,cycle) VALUES ($recur->id, $order_num, 0)");
+
+        //send recurring Notification email for user
+        require_once 'CRM/Contribute/BAO/ContributionPage.php';
+        CRM_Core_Error::debug_log_message( "Start to send recurring norify" );
+        CRM_Contribute_BAO_ContributionPage::recurringNotify( 'START', $ids['contact'], $ids['contributionPage'], $recur);
+      }
+    }
+
+    function go( &$input, &$ids, &$objects) {
+      $contribution =& $objects['contribution'];
+      $order_num = $contribution->id;
+      $note = $note ? $note : '';
+      $failed = false;
+
+      if ( $order_num != $input['OrderNumber'] ) {
+        CRM_Core_Error::debug_log_message( "OrderNumber values doesn't match between database and IPN request" );
+        $note .= ts("Failuare: OrderNumber values doesn't match between database and IPN request")."\n";
+        $failed = true;
+      } 
+
+      if ( $contribution->total_amount != $input['amount'] ) {
+        CRM_Core_Error::debug_log_message( "Amount values dont match between database and IPN request" );
+        $note .= ts("Failuare: Amount values dont match between database and IPN request")."\n";
+        $failed = true;
+      }
+      else {
+        $contribution->total_amount = $input['amount'];
+      }
+
+      require_once 'CRM/Core/Transaction.php';
+      $transaction = new CRM_Core_Transaction();
+
+      $participant =& $objects['participant'];
+      $membership  =& $objects['membership' ];
+
+      $signature = $objects['paymentProcessor']['signature'];
+      $checksum = md5($input['MerchantNumber'].$input['OrderNumber'].$input['PRC'].$input['SRC'].$signature.$input['Amount']);
+      if($checksum != $input['CheckSum']){
+        CRM_Core_Error::debug_log_message( "Checksum Error" );
+        $note .= ts("Failuare: Transaction number and system response number doesn't match. Please contact us for further assistant.")."\n";
+        $this->failed( $objects, $transaction );
+        $failed = true;
+      }
+
+      if($input['PRC'] || $input['SRC']){
+        require_once('CRM/Core/Payment/NewwebResponse.php');
+        $e = new CRM_Core_Payment_NewwebResponse;
+        $error = $e->response($input['PRC'], $input['SRC'], $input['BankResponseCode']);
+        $note .= implode("\n",$error);
+        $note .= " (Error code: PRC-{$input['PRC']},SRC-{$input['SRC']},BRC-{$input['BRC']})\n";
+        $this->failed( $objects, $transaction );
+        $failed = true;
+      }
+
+      if(!$failed){
+        // check if contribution is already completed, if so we ignore this ipn
+        $contribution->receive_date = date('YmdHis');
+        $input['trxn_id'] = $contribution->id;
+        if ( $contribution->contribution_status_id == 1 ) {
+            $transaction->commit();
+            CRM_Core_Error::debug_log_message( "returning since contribution has already been handled" );
+            $note .= ts('Duplicate submitting. This aontribution has already been handled.')."\n";
+            $return = true;
+        }
+        else{
+          $note .= ts('Completed')."\n";
+          $this->completeTransaction( $input, $ids, $objects, $transaction);
+        }
+      }
+
+      $this->addNote($note, $contribution);
+
+      return $return;
+    }
+
+
+    function main( $component = 'contribute' , $input = NULL, $ids = NULL, $objects = NULL) {
+      require_once 'CRM/Utils/Request.php';
+      
+      if(!$input){
+        $input['component'] = $component;
+        $this->getInput( $input);
+      }
+
+      if(!$ids){
+        // get the contribution and contact ids from the GET params
+        $ids['contact'] = self::retrieve( 'contactID', 'Integer', 'GET' , true);
+        $ids['contribution'] = self::retrieve( 'contributionID', 'Integer', 'GET' , true);
+        if ( $component == 'event' ) {
+          $ids['event'] = self::retrieve( 'eventID'      , 'Integer', 'GET', true );
+          $ids['participant'] = self::retrieve( 'participantID', 'Integer', 'GET', true );
+        } else {
+          // get the optional ids
+          $ids['membership'] = self::retrieve( 'membershipID'       , 'Integer', 'GET', false );
+          $ids['contributionRecur'] = self::retrieve( 'contributionRecurID', 'Integer', 'GET', false );
+          $ids['contributionPage'] = self::retrieve( 'contributionPageID' , 'Integer', 'GET', false );
+          $ids['related_contact'] = self::retrieve( 'relatedContactID'   , 'Integer', 'GET', false );
+          $ids['onbehalf_dupe_alert'] = self::retrieve( 'onBehalfDupeAlert'  , 'Integer', 'GET', false );
+        }
+      }
+
+      if(!$objects){
+        $objects = array();
+      }
+      
+      if ( ! $this->validateData( $input, $ids, $objects ) ) {
+        return false;
+      }
+
+      self::$_paymentProcessor =& $objects['paymentProcessor'];
+      if($ids['contributionRecur'] && $objects['contribution']->contribution_recur_id ){
+        return $this->recur($input, $ids, $objects);
+      }
+      else{
+        return $this->go($input, $ids, $objects);
+      }
+    }
+}
+
+
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Core/Payment/NewwebResponse.php civicrm-netivism/CRM/Core/Payment/NewwebResponse.php
--- civicrm-3.2.3/CRM/Core/Payment/NewwebResponse.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/CRM/Core/Payment/NewwebResponse.php	2010-12-30 17:38:07.000000000 +0800
@@ -0,0 +1,191 @@
+<?php
+require_once 'CRM/Contribute/DAO/Contribution.php';
+class CRM_Core_Payment_NewwebResponse {
+  function response($prc, $src, $brc = NULL, $id = NULL){
+    if($id){
+      $contribution =& new CRM_Contribute_DAO_Contribution( );
+      $contribution->id = $id;
+      if ( $contribution->find( true ) ) {
+        $dup_link = CRM_Utils_System::url("civicrm/contribute/transact","reset=1&id={$contribution->contribution_page_id}",false, null, false );
+      }
+      else{
+        $dup_link = CRM_Utils_System::url("support");
+      }
+    }
+    else{
+      $dup_link = CRM_Utils_System::url("support");
+    }
+    $contact_link = CRM_Utils_System::url("contact");
+    $error['nopaid'] = ts("Transaction failed. You won't be doing any charge of this transaction. Below is the detail of this failed transaction:");
+    if($prc == 8){
+"contribution";
+      $error[$prc] = $this->prc($prc);
+      $error[$prc] .= ': '.ts("This may occurred because you press the back button of browser. You can ignore this transaction, and try <a href='%1'>create a new one.</a>.", array($dup_link));
+    }
+    elseif($prc == 52){
+      $error[$prc] = $this->prc($prc);
+      if($brc){
+        $error[$prc] .= ": ".$this->brc($brc);
+      }
+    }
+    elseif($prc == 34){
+      $error[$prc] = $this->prc($prc);
+      if($brc){
+        $error[$prc] .= ": ".$this->brc($brc);
+      }
+    }
+    else{
+      $error['system'] = ts("Network or system error. Please try again a minutes later, if you still can't success, please contact us for further assistance.");
+      if($brc){
+        $error[$brc] = $this->brc($brc);
+      }
+    }
+    $error[] = ts("&raquo; <a href='%1'>Try again</a>", array($dup_link));
+    $error[] = ts("&raquo; <a href='%1'>Contact us</a>", array($contact_link));
+    return $error;
+  }
+  // Bank response	
+  function brc($c = NULL){
+    static $code = array();
+    if($c){
+      if ($code[$c]) {
+        return $code[$c];
+      }
+    }
+    else{
+      if (!empty($code)) {
+        return $code;
+      }
+    }
+
+    $code['00'] = ts('BRC: Approved or completed successfully ');
+    $code['01'] = ts('BRC: Refer to card issuer');
+    $code['02'] = ts('BRC: Refer to card issuer\'s special conditions');
+    $code['03'] = ts('BRC: Invalid merchant');
+    $code['04'] = ts('BRC: Pick-up card');
+    $code['05'] = ts('BRC: Do not honour');
+    $code['06'] = ts('BRC: Error');
+    $code['07'] = ts('BRC: Pick-up card, special condition');
+  //	$code['08'] = ts('BRC: Honour with identification');
+  //	$code['11'] = ts('BRC: Approved(VIP)');
+    $code['12'] = ts('BRC: Invalid transaction');
+    $code['13'] = ts('BRC: Invalid amount');
+    $code['14'] = ts('BRC: Invalid card number (no such number)');
+    $code['15'] = ts('BRC: No such issuer');
+    $code['19'] = ts('BRC: Re-Enter Transaction');
+    $code['21'] = ts('BRC: No Action Taken (Unable back out prior trans)');
+    $code['25'] = ts('BRC: Unable to Locate Record in File');
+    $code['28'] = ts('BRC: File Temporarily not Available for Update or Inquiry');
+    $code['30'] = ts('BRC: Format error');
+  //	$code['31'] = ts('BRC: Bank not supported by switch');
+    $code['33'] = ts('BRC: Expired card');
+  //	$code['36'] = ts('BRC: Restricted card');
+  //	$code['38'] = ts('BRC: Allowable PIN tries exceeded');
+    $code['41'] = ts('BRC: Lost card');
+    $code['43'] = ts('BRC: Stolen card, pick-up');
+    $code['51'] = ts('BRC: Not sufficient funds');
+    $code['54'] = ts('BRC: Expired card');
+    $code['55'] = ts('BRC: Incorrect personal identification number (PIN)');
+  //	$code['56'] = ts('BRC: No card record');
+    $code['57'] = ts('BRC: Transaction not permitted to cardholder');
+    $code['61'] = ts('BRC: Exceeds withdrawal amount limit');
+    $code['62'] = ts('BRC: Restricted card');
+    $code['65'] = ts('BRC: Exceeds withdrawal frequency limit');
+  //	$code['67'] = ts('BRC: decline Exceeds withdrawal frequency limit Hart capture (requires that card be picked up at the ATM)');
+  //	$code['68'] = ts('BRC: Response received too late');
+    $code['75'] = ts('BRC: Allowable number of PIN exceeded');
+  //	$code['76'] = ts('BRC: Unable to Locate Previous Message');
+    $code['80'] = ts('BRC: Invalid Date');
+    $code['81'] = ts('BRC: Cryptographic Error Found in PIN or CVV');
+    $code['82'] = ts('BRC: Incorrect CVV');
+    $code['85'] = ts('BRC: No Reason To Decline a Request for AddressVerification');
+  //	$code['87'] = ts('BRC: Bad track 2 (reserved for BASE24 use)');
+  //	$code['88'] = ts('BRC: Reserved for private use');
+  //	$code['89'] = ts('BRC: System error (reserved for BASE24 use)');
+  //	$code['90'] = ts('BRC: Cutoff is in process (switch ending a day\'s business and starting the next. Transaction can be sent again in a few minutes)');
+    $code['91'] = ts('BRC: Issuer or switch is inoperative');
+  //	$code['92'] = ts('BRC: Financial institution or intermediate  network facility cannot be found for routing');
+    $code['93'] = ts('BRC: Transaction cannot be Completed Violation of Law');
+    $code['94'] = ts('BRC: Duplicate transmission');
+    $code['96'] = ts('BRC: System malfunction');
+    $code['99'] = ts('BRC: Line Busy');
+    $code['IE'] = ts('BRC: ID Error');
+    
+    if($c){
+      return $code[$c];
+    }
+    else{
+      return $code;
+    }
+  }
+
+
+  // Main Response
+  function prc($c = NULL){
+    static $code = array();
+    if($c){
+      if ($code[$c]) {
+        return $code[$c];
+      }
+    }
+    else{
+      if (!empty($code)) {
+        return $code;
+      }
+    }
+
+    $code['0'] = ts('PRC: operation success');
+    $code['1'] = ts('PRC: operation pending');
+    $code['2'] = ts('PRC: undefined object');
+    $code['3'] = ts('PRC: parameter not found');
+    $code['4'] = ts('PRC: parameter too short');
+    $code['5'] = ts('PRC: parameter too long');
+    $code['6'] = ts('PRC: parameter format error');
+    $code['7'] = ts('PRC: parameter value error');
+    $code['8'] = ts('PRC: duplicate object');
+    $code['9'] = ts('PRC: parameter mismatch');
+    $code['10'] = ts('PRC: input error');
+    $code['11'] = ts('PRC: verb not valid in present state');
+    $code['12'] = ts('PRC: communication error');
+    $code['13'] = ts('PRC: internal etill error');
+    $code['14'] = ts('PRC: database error');
+    $code['15'] = ts('PRC: cassette error');
+    $code['17'] = ts('PRC: unsupported API version');
+    $code['18'] = ts('PRC: obsolete API version');
+    $code['19'] = ts('PRC: autoapprove failed');
+    $code['20'] = ts('PRC: autodeposit failed');
+    $code['21'] = ts('PRC: cassette not running');
+    $code['22'] = ts('PRC: cassette not valid');
+    $code['23'] = ts('PRC: unsupported in sysplex');
+    $code['24'] = ts('PRC: parameter null value');
+    $code['30'] = ts('PRC: XML error');
+    $code['31'] = ts('PRC: corequisite parameter not found');
+    $code['32'] = ts('PRC: invalid parameter combination');
+    $code['33'] = ts('PRC: batch error');
+    $code['34'] = ts('PRC: financial failure');
+    $code['43'] = ts('PRC: block black BIN');
+    $code['44'] = ts('PRC: block foreign');
+    $code['50'] = ts('PRC: servlet init error');
+    $code['51'] = ts('PRC: authentication error');
+    $code['52'] = ts('PRC: authorization error');
+    $code['53'] = ts('PRC: unhandled exception');
+    $code['54'] = ts('PRC: duplicate parameter value not allowed');
+    $code['55'] = ts('PRC: command not supported');
+    $code['56'] = ts('PRC: crypto error');
+    $code['57'] = ts('PRC: not active');
+    $code['58'] = ts('PRC: parameter not allowed');
+    $code['59'] = ts('PRC: delete error');
+    $code['60'] = ts('PRC: websphere');
+    $code['61'] = ts('PRC: supported in sysplex admin only');
+    $code['62'] = ts('PRC: realm');
+    $code['32768'] = ts('PRC: missing API version');
+    $code['-1'] = ts('PRC: dispathcer error');
+    
+    if($c){
+      return $code[$c];
+    }
+    else{
+      return $code;
+    }
+  }
+}
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Event/Payment/GW.php civicrm-netivism/CRM/Event/Payment/GW.php
--- civicrm-3.2.3/CRM/Event/Payment/GW.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/CRM/Event/Payment/GW.php	2010-12-30 17:38:07.000000000 +0800
@@ -0,0 +1,47 @@
+<?php
+require_once 'CRM/Core/Payment/GW.php';
+
+class CRM_Event_Payment_GW extends CRM_Core_Payment_GW {
+    /** 
+     * We only need one instance of this object. So we use the singleton 
+     * pattern and cache the instance in this variable 
+     *
+     * @var object 
+     * @static 
+     */
+    static private $_singleton = null;
+    
+    /**
+     * Constructor
+     *
+     * @param string $mode the mode of operation: live or test
+     *
+     * @return void
+     */
+    function __construct( $mode, &$paymentProcessor ) {
+        parent::__construct( $mode, $paymentProcessor );
+    }
+
+    /**
+     * singleton function used to manage this object
+     *
+     * @param string $mode the mode of operation: live or test
+     *
+     * @return object
+     * @static
+     */
+    static function &singleton( $mode, &$paymentProcessor ) {
+        $processorName = $paymentProcessor['name'];
+        if (self::$_singleton[$processorName] === null ) {
+            self::$_singleton[$processorName] =& new CRM_Event_Payment_GW( $mode, $paymentProcessor );
+        }
+        return self::$_singleton[$processorName];
+    }
+    function doTransferCheckout( &$params ) {
+        parent::doTransferCheckout( $params, 'event' );
+    }
+    
+}
+
+
+
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Event/Payment/Newweb.php civicrm-netivism/CRM/Event/Payment/Newweb.php
--- civicrm-3.2.3/CRM/Event/Payment/Newweb.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/CRM/Event/Payment/Newweb.php	2010-12-30 17:38:07.000000000 +0800
@@ -0,0 +1,62 @@
+<?php
+
+/*
+ * Copyright (C) 2007
+ * Licensed to CiviCRM under the Academic Free License version 3.0.
+ *
+ * Written and contributed by Ideal Solution, LLC (http://www.idealso.com)
+ *
+ */
+
+/**
+ * @package CRM
+ * @author Marshal Newrock <marshal@idealso.com>
+ * $Id: Newweb.php 25823 2010-01-11 09:04:04Z shot $
+ **/
+
+require_once 'CRM/Core/Payment/Newweb.php';
+
+class CRM_Event_Payment_Newweb extends CRM_Core_Payment_Newweb {
+    /** 
+     * We only need one instance of this object. So we use the singleton 
+     * pattern and cache the instance in this variable 
+     *
+     * @var object 
+     * @static 
+     */
+    static private $_singleton = null;
+    
+    /**
+     * Constructor
+     *
+     * @param string $mode the mode of operation: live or test
+     *
+     * @return void
+     */
+    function __construct( $mode, &$paymentProcessor ) {
+        parent::__construct( $mode, $paymentProcessor );
+    }
+
+    /**
+     * singleton function used to manage this object
+     *
+     * @param string $mode the mode of operation: live or test
+     *
+     * @return object
+     * @static
+     */
+    static function &singleton( $mode, &$paymentProcessor ) {
+        $processorName = $paymentProcessor['name'];
+        if (self::$_singleton[$processorName] === null ) {
+            self::$_singleton[$processorName] =& new CRM_Event_Payment_Newweb( $mode, $paymentProcessor );
+        }
+        return self::$_singleton[$processorName];
+    }
+    function doTransferCheckout( &$params ) {
+        parent::doTransferCheckout( $params, 'event' );
+    }
+    
+}
+
+
+
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Import/Form/MapField.php civicrm-netivism/CRM/Import/Form/MapField.php
--- civicrm-3.2.3/CRM/Import/Form/MapField.php	2010-12-30 17:48:13.000000000 +0800
+++ civicrm-netivism/CRM/Import/Form/MapField.php	2010-12-30 17:38:07.000000000 +0800
@@ -488,6 +488,7 @@
 
         $js = "<script type='text/javascript'>\n";
         $formName = 'document.forms.' . $this->_name;
+        
         //used to warn for mismatch column count or mismatch mapping      
         $warning = 0;
         for ( $i = 0; $i < $this->_columnCount; $i++ ) {
@@ -620,21 +621,13 @@
             } else {
                 $js .= "swapOptions($formName, 'mapper[$i]', 0, 3, 'hs_mapper_0_');\n";
                 if ($hasColumnNames) {
-                    // do array search first to see if has mapped key
-                    $columnKey = '';
-                    $columnKey = array_search($this->_columnNames[$i], $this->_mapperFields);
-                    if(isset($this->_fieldUsed[$columnKey])){
-                      $defaults["mapper[$i]"] = $columnKey;
-                      $this->_fieldUsed[$key] = true;
-                    }
-                    else{
-                      // Infer the default from the column names if we have them
-                      $defaults["mapper[$i]"] = array(
-                                                          $this->defaultFromColumnName($this->_columnNames[$i], 
-                                                          $columnPatterns),
-                                                          0
-                      );
-                    }
+                    // Infer the default from the column names if we have them
+                    $defaults["mapper[$i]"] = array(
+                                                           $this->defaultFromColumnName($this->_columnNames[$i], 
+                                                                                    $columnPatterns),
+                                                           0
+                                                           );
+                    
                 } else {
                     // Otherwise guess the default from the form of the data
                     $defaults["mapper[$i]"] = array(
diff -ruN --exclude=.git civicrm-3.2.3/CRM/Pledge/BAO/PledgeBlock.php civicrm-netivism/CRM/Pledge/BAO/PledgeBlock.php
--- civicrm-3.2.3/CRM/Pledge/BAO/PledgeBlock.php	2010-12-30 17:48:13.000000000 +0800
+++ civicrm-netivism/CRM/Pledge/BAO/PledgeBlock.php	2010-12-30 17:38:07.000000000 +0800
@@ -290,8 +290,7 @@
             $frequencyUnits = CRM_Core_OptionGroup::values( 'recur_frequency_units' );
             foreach ( $freqUnitVals as $key => $val ) {
                 if ( array_key_exists( $val, $frequencyUnits )  ) { 
-                    $freqUnits[$val] = CRM_Utils_Array::value('is_pledge_interval', $pledgeBlock) ? 
-                        "{$frequencyUnits[$val]}(s)" : $frequencyUnits[$val];
+                  $freqUnits[$val] = CRM_Utils_Array::value('is_pledge_interval', $pledgeBlock) ? ts($val) : ts($val);
                 }
             }
             $form->addElement( 'select', 'pledge_frequency_unit', null, $freqUnits ); 
diff -ruN --exclude=.git civicrm-3.2.3/bin/NewwebProcessor.php civicrm-netivism/bin/NewwebProcessor.php
--- civicrm-3.2.3/bin/NewwebProcessor.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/bin/NewwebProcessor.php	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,34 @@
+<?php
+// bootstrap the environment and run the processor
+session_start();
+print '<pre>';
+require_once '../civicrm.config.php';
+require_once 'CRM/Core/Config.php';
+$config =& CRM_Core_Config::singleton();
+require_once 'CRM/Core/Payment.php'; 
+require_once 'CRM/Core/BAO/PaymentProcessor.php';
+$p = new CRM_Core_BAO_PaymentProcessor();
+$paymentProcessor = $p->getPayment(1,'live');
+require_once 'CRM/Core/Payment/Newweb.php';
+$newweb =& new CRM_Core_Payment_Newweb('live', $paymentProcessor);
+$newweb->cron();
+
+/*
+CRM_Utils_System::authenticateScript(true);
+
+require_once 'CRM/Core/Lock.php';
+$lock = new CRM_Core_Lock('CiviContributeProcessor');
+
+if ($lock->isAcquired()) {
+    // try to unset any time limits
+    if (!ini_get('safe_mode')) set_time_limit(0);
+
+    CiviContributeProcessor::process( );
+} else {
+    throw new Exception('Could not acquire lock, another CiviMailProcessor process is running');
+}
+
+$lock->release();
+
+echo "Done processing<p>";
+*/
diff -ruN --exclude=.git civicrm-3.2.3/bin/civimail.cronjob.php civicrm-netivism/bin/civimail.cronjob.php
--- civicrm-3.2.3/bin/civimail.cronjob.php	2010-12-30 17:48:14.000000000 +0800
+++ civicrm-netivism/bin/civimail.cronjob.php	2010-12-30 17:38:10.000000000 +0800
@@ -1,4 +1,5 @@
 <?php
+include_once '../../../../../includes/unicode.inc';
 
 /*
  +--------------------------------------------------------------------+
diff -ruN --exclude=.git civicrm-3.2.3/drupal/modules/civicrm_gw/civicrm_gw.info civicrm-netivism/drupal/modules/civicrm_gw/civicrm_gw.info
--- civicrm-3.2.3/drupal/modules/civicrm_gw/civicrm_gw.info	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/drupal/modules/civicrm_gw/civicrm_gw.info	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,6 @@
+name = GreenWorld Payment
+description = GreenWorld GW payment functions for civicrm. Include ecpay and ecbank.
+package = CiviCRM
+dependencies[] = civicrm
+core = 6.x
+version = 3.15-dev
diff -ruN --exclude=.git civicrm-3.2.3/drupal/modules/civicrm_gw/civicrm_gw.install civicrm-netivism/drupal/modules/civicrm_gw/civicrm_gw.install
--- civicrm-3.2.3/drupal/modules/civicrm_gw/civicrm_gw.install	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/drupal/modules/civicrm_gw/civicrm_gw.install	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,109 @@
+<?php
+// $Id: devel.install,v 1.24.2.7 2009/07/30 19:38:48 weitzman Exp $
+/**
+ * @file
+ *   Install file for civicrm_gw module.
+ */
+
+ 
+/**
+ * Implementation of hook_install()
+ */
+function civicrm_gw_install() {
+  civicrm_initialize( );
+  require_once "CRM/Core/DAO.php";
+
+  // new payment processor
+  $sql = "INSERT INTO civicrm_payment_processor_type (id, name, title, description, is_active, is_default, user_name_label, password_label, signature_label, subject_label, class_name, url_site_default, url_api_default, url_recur_default, url_button_default, url_site_test_default, url_api_test_default, url_recur_test_default, url_button_test_default, billing_mode, is_recur, payment_type) VALUES
+(16, 'GW', 'Green World', NULL, 1, 0, 'Store ID', 'Password', 'Signature (Checksum)', NULL, 'Payment_GW', 'https://ecpay.com.tw/form_Sc_to5.php', NULL, NULL, NULL, 'https://ecpay.com.tw/form_Sc_to5.php', NULL, NULL, NULL, 4, 0, 1)";
+
+  CRM_Core_DAO::executeQuery($sql);
+  /* // we don't need this, yet.
+  $dao = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_payment_processor_type WHERE name LIKE 'GW'");
+  $dao->fetch();
+  $ppt_id = $dao->id;
+
+  // new payment instrument
+  include_once "civicrm_gw.module";
+  $new_instrument = _civicrm_gw_instrument();
+  $dao = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_option_group WHERE name LIKE 'payment_instrument'");
+  $dao->fetch();
+  $instrument_id = $dao->id;
+  $dao = CRM_Core_DAO::executeQuery("SELECT value FROM civicrm_option_value WHERE option_group_id = $instrument_id ORDER BY value DESC");
+  $dao->fetch();
+  $next = $dao->value;
+
+  if($instrument_id){
+    foreach($new_instrument as $k => $v){
+      $next++;
+      $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_option_value WHERE option_group_id = $instrument_id AND name LIKE '$k'");
+      $dao->fetch();
+      if(!$dao->id){
+        $sql = "INSERT INTO civicrm_option_value (option_group_id, label, value, name, grouping, filter, is_default, weight, description, is_optgroup, is_reserved, is_active, component_id, visibility_id) VALUES ($instrument_id, '{$v['name']}', $next, '$k', NULL, $ppt_id, NULL, $next, '{$v['desc']}', 0, 0, 1, NULL, NULL)";
+        CRM_Core_DAO::executeQuery($sql);
+      }
+    }
+    // update credit card descriptions.
+    $sql = "UPDATE civicrm_option_value SET description = 'Using Credit Card payment instrument, you will authorize to charge, then receive the email receipt immediately. We recommand to use credit card to save your time and without refund problem' WHERE option_group_id = $instrument_id AND value = 1";
+    CRM_Core_DAO::executeQuery($sql);
+  }
+
+  // now procceed the msg template
+  $dao = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_option_group WHERE name LIKE 'msg_tpl_workflow_contribution'");
+  $dao->fetch();
+  $ctpl_id = $dao->id;
+  $dao = CRM_Core_DAO::executeQuery("SELECT value FROM civicrm_option_value WHERE option_group_id = $ctpl_id ORDER BY value DESC");
+  $dao->fetch();
+  $ctpl_next = $dao->value+1;
+  $dao = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_option_group WHERE name LIKE 'msg_tpl_workflow_event'");
+  $dao->fetch();
+  $etpl_id = $dao->id;
+  $dao = CRM_Core_DAO::executeQuery("SELECT value FROM civicrm_option_value WHERE option_group_id = $etpl_id ORDER BY value DESC");
+  $dao->fetch();
+  $etpl_next = $dao->value+1;
+
+  $sql = "
+    INSERT INTO civicrm_option_value (option_group_id, name, label, value, weight) VALUES 
+    ($ctpl_id, 'contribution_failed', 'Contributions - Failed notification.', $ctpl_next, $ctpl_next),
+    ($etpl_id, 'event_failed', 'Event - Registration failed notification.', $etpl_next, $etpl_next)
+  ";
+  CRM_Core_DAO::executeQuery($sql);
+
+  $cmsg_id = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_option_value WHERE name LIKE 'contribution_failed'");
+  $cmsg_id->fetch();
+   */
+}
+
+/**
+ * Implementation of hook_uninstall().
+ */
+function civicrm_gw_uninstall() {
+  civicrm_initialize();
+  require_once "CRM/Core/DAO.php";
+  CRM_Core_DAO::executeQuery("DELETE FROM civicrm_payment_processor_type WHERE name LIKE 'GW'");
+  CRM_Core_DAO::executeQuery("OPTIMIZE TABLE civicrm_payment_processor_type");
+
+  // we won't delete instrument for preserve contribution record
+}
+
+/**
+ * Implementation of hook_enable().
+ */
+function civicrm_gw_enable() {
+  civicrm_initialize();
+  require_once "CRM/Core/DAO.php";
+  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor_type SET is_active = 1 WHERE name LIKE 'GW'");
+  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor SET is_active = 1 WHERE payment_processor_type LIKE 'GW'");
+}
+
+/**
+ * Implementation of hook_disable().
+ */
+function civicrm_gw_disable() {
+  civicrm_initialize();
+  require_once "CRM/Core/DAO.php";
+  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor_type SET is_active = 0 WHERE name LIKE 'GW'");
+  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor SET is_active = 0 WHERE payment_processor_type LIKE 'GW'");
+}
+
+
diff -ruN --exclude=.git civicrm-3.2.3/drupal/modules/civicrm_gw/civicrm_gw.module civicrm-netivism/drupal/modules/civicrm_gw/civicrm_gw.module
--- civicrm-3.2.3/drupal/modules/civicrm_gw/civicrm_gw.module	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/drupal/modules/civicrm_gw/civicrm_gw.module	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,177 @@
+<?php
+/**
+ * Page wrapper for newweb in civicrm + drupal
+ */
+function civicrm_gw_init(){
+  $path = drupal_get_path('module', 'civicrm_gw');
+  drupal_add_css("$path/civicrm_gw.css");
+
+  if(strstr($_GET['q'], 'civicrm_gw')){
+    $GLOBALS['conf']['cache'] = FALSE;
+  }
+}
+
+function civicrm_gw_menu(){
+  return array(
+    'civicrm_gw_error' => array(
+      'access callback' => true,
+      'page callback' => 'civicrm_gw_error',
+      'type' => MENU_CALLBACK,
+      'weight' => 0,
+    )
+  );
+}
+
+function civicrm_gw_error(){
+  $msg = $_SESSION['gw']['error'];
+  if(!count($msg)){
+    drupal_access_denied();
+  }
+  $output .= '<div class="gw-error">';
+  $output .= '<div class="gw-error-first">'.array_shift($msg).'</div>';
+  foreach($msg as $m){
+    $items[] = $m;
+  }
+  $output .= theme('item_list', $items);
+  $output .= '</div>';
+  return $output;
+}
+
+/**
+ * Implementation of hook_civicrm_buildForm()
+ */
+/*
+function civicrm_gw_civicrm_buildForm($form_name, &$form){
+  switch($form_name){
+    case 'CRM_Contribute_Form_Contribution_ThankYou':
+      if(isset($_POST['final_result'])){
+        if($_POST['final_result'] == 1 && $_POST['final_return_PRC'] == 0 && $_POST['final_return_SRC'] == 0){
+          // success here
+        }
+        else{
+          // error handling here
+          require_once "CRM/Core/Payment/NewwebResponse.php";
+          $e = new CRM_Core_Payment_NewwebResponse;
+          $prc = $_POST['final_return_PRC'];
+          $src = $_POST['final_return_SRC'];
+          $brc = $_POST['final_return_BankRC'];
+          $order_num = $_POST['P_OrderNumber'];
+          $error = $e->response($prc,$src,$brc, $order_num);
+          // simulate message
+          $_SESSION['newweb']['error'] = $error;
+          drupal_goto('civicrm_gw_error', "id=$order_num");
+        }
+      }
+      break;
+    case 'CRM_Contribute_Form_Contribution_Main':
+      // add newweb payment method selection
+      require_once "CRM/Core/DAO.php";
+      if($form->_paymentProcessor['payment_processor_type'] == 'Newweb'){
+        unset($_SESSION['newweb']);
+        unset($_SESSION['newweb_form']);
+        $dao = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_payment_processor_type WHERE name LIKE 'Newweb'");
+        $dao->fetch();
+        $ppt_id = $dao->id;
+        $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_option_value WHERE filter = $ppt_id AND is_active = 1");
+        $default = 'Credit Card';
+        $radios[1] = array('name' => $default, 'label' => ts($default));
+        while($dao->fetch()){
+          $radios[$dao->value] = array('name'=> $dao->name, 'label' => ts($dao->label), 'description' => $dao->description);
+
+        }
+        $form->addElement('hidden', 'newweb_instrument_id', 1);
+        drupal_add_js(_civicrm_gw_js_form($radios), 'inline');
+      }
+      break;
+  }
+}
+*/
+
+/**
+ * Implementation of hook_civicrm_pageRun
+ */
+function civicrm_gw_civicrm_pageRun( &$page ) {
+    // You can assign variables to the template using:
+    // $page->assign( 'varName', $varValue );
+    // in your template, {$varName} will output the contents of $varValue
+    // you should customize your template if doing so
+
+// $page->assign( 'varName', 'This is a variable assigned by the hook' );
+}
+
+  
+
+/**
+ * Implementation of hook_cron()
+ */
+function civicrm_gw_cron(){
+  // we don't need cron, yet
+}
+
+/**
+ * Helper function for CiviCRM
+ */
+function _civicrm_gw_instrument(){
+  // description need to lower than 256 char.(civicrm db limitation.)
+  /*
+  return array(
+    'ATM' => array('name' => 'ATM', 'desc' => 'Using ATM payment instrument, you will get the virtual ATM code, after you paid the correct amount to this virtual ATM account, we will receive your payment, and will connect to your account here.'),
+    'WEBATM' => array('name' => 'Web ATM', 'desc' => 'Using Web ATM payment instrument, you need to have card reader, then you can insert card and pay it online. We will receive payment on next available work day, then send an email to you.'),
+    'CS' => array('name'=>'Convenient Store', 'desc'=>'Using Convenient Store payment instrument, you meed to use printer to print out invoice on the screen. After that, go to nearest convenient store, show the invoice and paid on that.'),
+    'MMK' => array('name'=>'Convenient Store Code','desc' => 'Using Convenient Store code, you can just write out the payment code, then go to one of convenient sotre of 7-11 (iBon), Family (FamiPort), or HiLife (Life-ET). Enter code in their machine, they will print out invoice for you, then pay on it.'),
+    'ALIPAY' => array('name' => 'AliPay', 'desc' => 'Only when you have AliPay service account and virtual points, you can use this service.'),
+  );
+   */
+}
+
+function _civicrm_gw_js_redirect(){
+  $js = '
+$(document).ready(function(){
+  $("#redirect-form").submit();
+});
+';
+  drupal_add_js($js, 'inline');
+}
+
+/* we don't need multiple payment yet.
+function _civicrm_gw_js_form($radios){
+  $output = "<div class='section'>";
+  $output .= "<div class='label'>".ts('Payment Instrument').'</div>';
+  $output .= "<div class='content'>";
+  foreach($radios as $value => $radio){
+    $checked = $value == 1 ? "checked='checked'" : '';
+    $radio['description'] = str_replace(array("\n","\r"), array('',''), $radio['description']);
+    $output .= "<div class='newweb-dummy-wrapper'><label><input type='radio' name='newweb_dummy' value='".$value."' class='form-radio' $checked />".$radio['label']."</label><div class='hover-item'>".$radio['description']."</div></div>";
+  }
+  $output .= '</div>';
+  $output .= "<div class='clear'></div>";
+  $output .= '</div>';
+  return '
+$(document).ready(function(){
+  // add radios
+  $("#crm-container form[name=Main] #intro_text").after("'.$output.'");
+  // modified exists recurring input
+
+  $("input[name=newweb_dummy]").click(function(){
+    var v = $(this).val();
+    $("input[name=newweb_instrument_id]").val(v);
+    if(v != 1){
+      $("#crm-container input[name=is_recur][value=0]").click();
+      $("#crm-container input[name=is_recur][value=1]").attr("disabled","disabled");
+    }
+    else{
+      $("#crm-container input[name=is_recur][value=1]").removeAttr("disabled");
+    }
+  });
+  
+  $(".hover-item").css({position:"absolute",display:"none"});
+  $(".newweb-dummy-wrapper").hover(function(){
+    $(this).children(".hover-item").show();
+  },function(){
+    $(this).children(".hover-item").hide();
+  });
+});  
+  ';
+}
+*/
+
diff -ruN --exclude=.git civicrm-3.2.3/drupal/modules/civicrm_newweb/civicrm_newweb.css civicrm-netivism/drupal/modules/civicrm_newweb/civicrm_newweb.css
--- civicrm-3.2.3/drupal/modules/civicrm_newweb/civicrm_newweb.css	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/drupal/modules/civicrm_newweb/civicrm_newweb.css	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,13 @@
+.newweb-error{
+  border: 1px solid #FF3F3F;
+  background: #FFEFEF;
+  padding: 10px;
+}
+.hover-item {
+  margin-left: 100px;
+  margin-top: -5px;
+  border: 1px solid #777;
+  background: #FFFF99;
+  padding: 3px;
+  width: 300px;
+}
diff -ruN --exclude=.git civicrm-3.2.3/drupal/modules/civicrm_newweb/civicrm_newweb.inc civicrm-netivism/drupal/modules/civicrm_newweb/civicrm_newweb.inc
--- civicrm-3.2.3/drupal/modules/civicrm_newweb/civicrm_newweb.inc	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/drupal/modules/civicrm_newweb/civicrm_newweb.inc	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,350 @@
+<?php
+define('NEWWEB_TEST_HOST', '61.57.29.212');
+define('NEWWEB_TEST_USER', 'rp_nncf');
+define('NEWWEB_TEST_PASS', '');
+
+define('NEWWEB_HOST', '');
+define('NEWWEB_USER', '');
+define('NEWWEB_PASS', '');
+
+function civicrm_newweb_process_response($is_test){
+  $now = time();
+  civicrm_initialize();
+  require_once "CRM/Core/DAO.php";
+  require_once 'CRM/Core/Payment.php'; 
+  require_once 'CRM/Core/BAO/PaymentProcessor.php';
+  require_once 'CRM/Core/Payment/NewwebIPN.php';
+
+  $p = new CRM_Core_BAO_PaymentProcessor();
+  if($is_test){
+    $payment = $p->getPayment(1,'test');
+  }
+  else{
+    $payment = $p->getPayment(1,'live');
+  }
+  $newwebpath = _civicrm_newweb_path($is_test);
+
+  $filename = 'RP_'.$payment['user_name'].'_'.date('Ymd',time()-86400).'.out';
+  //$filename = 'RP_'.$payment['user_name'].'_'.'20101104'.'.out';
+  $response_str = _civicrm_newweb_sslftp($payment['user_name'], $newwebpath.'/'.$filename, 0, $is_test);
+  if($response_str === false){
+    // error when download files
+    print $error = "error in civicrm_newwweb_process_response: Can't download files. ";
+    watchdog("CiviCRM", $error);
+  }
+  elseif($response_str){
+    $response = _civicrm_newweb_decodeline($response_str, 'response');
+
+    foreach($response as $k => $r){
+      $sql = "UPDATE civicrm_contribution_newweb_recur SET response=$now WHERE recur_id = {$r['REFNUMBER']}";
+      CRM_Core_DAO::executeQuery($sql);
+
+      if($r['RESPONSE'] == 0){
+        // record success proccessed
+        // nothing to do here
+        // just to keep record to prevent further transaction errors
+      }
+      else{
+        // fail
+        print $error = "error in civicrm_newwweb_process_response:". $r['REFNUMBER'] . ":" . $r['RESPONSE'];
+        watchdog("CiviCRM", $error);
+      }
+    }
+  }
+  else{
+    // have file but no response
+    print $error = "error in civicrm_newwweb_process_response: No response today.";
+    watchdog("CiviCRM", $error);
+  }
+
+  if($error){
+    return FALSE;
+  }
+  else{
+    return TRUE;
+  }
+  
+}
+
+function civicrm_newweb_process_transaction($is_test){
+  $now = time();
+  civicrm_initialize();
+  require_once "CRM/Core/DAO.php";
+  require_once 'CRM/Core/Payment.php'; 
+  require_once 'CRM/Core/BAO/PaymentProcessor.php';
+  require_once 'CRM/Core/Payment/NewwebIPN.php';
+  require_once 'CRM/Contribute/DAO/Contribution.php';
+  require_once 'CRM/Utils/Array.php';
+  require_once 'CRM/Core/Payment/NewwebIPN.php';
+
+  $p = new CRM_Core_BAO_PaymentProcessor();
+  if($is_test){
+    $payment = $p->getPayment(1,'test');
+  }
+  else{
+    $payment = $p->getPayment(1,'live');
+  }
+  $newwebpath = _civicrm_newweb_path($is_test);
+
+  $filename = 'RP_Trans_'.$payment['user_name'].'_'.date('Ymd').'.log';
+  //$filename = 'RP_Trans_'.$payment['user_name'].'_'.'20101105'.'.log';
+  $transaction_str = _civicrm_newweb_sslftp($payment['user_name'], $newwebpath.'/'.$filename, 0, $is_test);
+  if($transaction_str === false){
+    // error when download files
+    print $error = "error in civicrm_newwweb_process_transaction: Can't download files. ";
+    watchdog("CiviCRM", $error);
+  }
+  elseif($transaction_str){
+    $trans = _civicrm_newweb_decodeline($transaction_str,'transaction');
+    foreach($trans as $k => $t){
+      $sql = "SELECT * FROM civicrm_contribution_recur c INNER JOIN civicrm_contribution_newweb_recur cnr ON c.id = cnr.recur_id WHERE c.id = {$t['REFNUMBER']}";
+      $recur = CRM_Core_DAO::executeQuery($sql);
+      $recur->fetch();
+
+      $contrib =& new CRM_Contribute_DAO_Contribution();
+      $contrib->id = $t['ORGORDERNUMBER'];
+      if ( !$contrib->find( true ) ) { 
+        exit();
+      }   
+
+      if($recur->id){
+        if($recur->cycle == 0){
+          // we have previous added contribution record
+          $contribution = $contrib;
+        }
+        else{
+          // we need to add new one.
+          // create a contribution and then get it processed
+          $contribution =& new CRM_Contribute_DAO_Contribution( );
+          $contribution->contact_id = $contrib->contact;
+          $contribution->contribution_type_id  = $contrib->contributionType;
+          $contribution->contribution_page_id  = $contrib->contribution_page_id;
+          $contribution->contribution_recur_id = $contrib->contribution_recur_id;
+          $contribution->receive_date          = $now;
+          $contribution->currency              = $contrib->currency;
+          $contribution->payment_instrument_id = $contrib->payment_instrument_id;
+          $contribution->amount_level          = $contrib->amount_level;
+        }
+
+        // now we have correct contribution object. procceed.
+
+        // submit recurring items by ipn functions
+        $input = $ids = array();
+        $input = array(
+          'component' => 'contribute',
+          'PRC' => $t['PRC'],
+          'SRC' => $t['SRC'],
+          'ApprovalCode' => $t['APPROVECODE'],
+          'BankResponseCode' => $t['BANKRESCODE'],
+          'MerchantNumber' => $t['MERCHANTNUMBER'],
+          'OrderNumber' => '',
+          'Amount' => (int)$recur->amount,
+          'amount' => (int)$recur->amount,
+          '_recurring' => TRUE,
+        );
+        $ids = array(
+          'contact' => $recur->contact_id,
+          'contribution' => $t['ORGORDERNUMBER'],
+          'contributionRecur' => $recur->id,
+          'contributionPage' => $contrib->contribution_page_id,
+        );
+        $objects = array(
+          'contribution' => $contribution, 
+          'membership' => NULL,
+          'participant' => NULL,
+          'event' => NULL,
+        );
+        require_once 'CRM/Core/Transaction.php';
+        $transaction = new CRM_Core_Transaction( );
+        $IPN = new CRM_Core_Payment_NewwebIPN();
+
+        // Check the response
+        // Status: Complete
+        if($t['PRC'] == 0 && $t['SRC'] == 0){
+          $IPN->completeTransaction( $input, $ids, $objects, $transaction );
+        }
+        // Status: failed, cancel. We don't have retry mechnism.
+        else{
+          require_once "CRM/Core/Payment/NewwebResponse.php";
+          $e = new CRM_Core_Payment_NewwebResponse;
+          $err= $e->response($t['PRC'], $t['SRC']);
+          $IPN->failed($objects, $transaction);
+          $recur->cancel_date = date("Y-m-d H:i:s");
+          $recur->save();
+        }
+      }
+    }
+    
+  }
+  else{
+    // have file but no response
+    print $error = "error in civicrm_newwweb_process_response: No response today.";
+    watchdog("CiviCRM", $error);
+  }
+
+  if($error){
+    return FALSE;
+  }
+  else{
+    return TRUE;
+  }
+}
+
+function civicrm_newweb_process_upload($is_test){
+  $now = time();
+  $nextday = mktime(6,0,0,date('n'),date('j'),date('Y'))+86400;
+  $create_check = $now - 86400; // yesterday
+  civicrm_initialize();
+  require_once "CRM/Core/DAO.php";
+  require_once 'CRM/Core/Payment.php'; 
+  require_once 'CRM/Core/BAO/PaymentProcessor.php';
+  require_once 'CRM/Core/Payment/NewwebIPN.php';
+  $p = new CRM_Core_BAO_PaymentProcessor();
+  if($is_test){
+    $payment = $p->getPayment(1,'test');
+  }
+  else{
+    $payment = $p->getPayment(1,'live');
+  }
+
+  // check first insert and recurring contributions.
+  // need check nextday for support newweb only allow upload new transaction after today
+  $sql = "SELECT * FROM civicrm_contribution_recur cr INNER JOIN civicrm_contribution_newweb_recur cnr ON cr.id = cnr.recur_id WHERE FROM_UNIXTIME($create_check) > cr.create_date && cr.end_date >= FROM_UNIXTIME($now) && cr.cancel_date IS NULL && cr.is_test = $is_test && cnr.cycle = 0 && cnr.upload = 0 ORDER BY cr.next_sched_contribution DESC";
+  $recur = CRM_Core_DAO::executeQuery($sql);
+
+  while( $recur->fetch() ){
+    // only effect when submit first recurring contribution
+    $contrib = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_contribution WHERE contribution_recur_id = $recur->id ORDER BY id ASC");
+    $contrib->fetch();
+    // start to collect output file string
+    $upload = array(
+      'MERCHANTNUMBER' => $payment['user_name'],
+      'REFNUMBER' => $recur->id,
+      'ORDERNUMBER' => $contrib->id,
+      'BRAND' => '',       // null for our status
+      'EXPIREDATE' => '',  // null for our status
+      'AMOUNT' => (int)$recur->amount,
+      'REGULAR' => NEWWEB_RECUR_DAY,
+      'ACTION' => 'New',
+      'STATUS' => '01',
+      'MODE' => 0, // 0 for month mode, 1 for date mode
+    );
+    $rows[$recur->id] = $upload;
+    
+    $upload_text = implode(',', $upload);
+    CRM_Core_DAO::executeQuery($sql);
+  }
+  if(count($rows)){
+    $data = _civicrm_newweb_encodeline($rows);
+    $newwebpath = _civicrm_newweb_path($is_test);
+    $filename = 'RP_'.$payment['user_name'].'_'.date('Ymd').'.dat';
+    file_save_data($data, $newwebpath.'/'.$filename, FILE_EXISTS_REPLACE);
+    $uploaded =  _civicrm_newweb_sslftp($payment['user_name'], $newwebpath.'/'.$filename, 1, $is_test);
+    if($uploaded){
+      $sql = "UPDATE civicrm_contribution_newweb_recur SET upload=$now WHERE recur_id IN (".implode(',', array_keys($rows)).")";
+    }
+    CRM_Core_DAO::executeQuery($sql);
+    return $uploaded;
+  }
+  return false;
+}
+
+function _civicrm_newweb_sslftp($id, $localfile, $upload, $is_test){
+  $dir = $upload ? 'import' : 'output';
+  if($is_test){
+    $cid = ftp_connect(NEWWEB_TEST_HOST);
+    $login = ftp_login($cid, NEWWEB_TEST_USER, NEWWEB_TEST_PASS);
+  }
+  else{
+    $cid = ftp_ssl_connect(NEWWEB_HOST);
+    $login = ftp_login($cid, NEWWEB_USER, NEWWEB_PASS);
+  }
+  if($login){
+    $path = $id.'/'.$dir;
+    $remotefile = $path .'/'. basename($localfile);
+
+    if($upload){
+      $success = ftp_put($cid, $remotefile, $localfile, FTP_ASCII);
+    }
+    else{
+      $success = ftp_get($cid, $localfile, $remotefile, FTP_ASCII);
+    }
+
+  }
+  ftp_close($cid);
+  if($success){
+    if($upload){
+      return true;
+    }
+    else{
+      return file_get_contents($localfile);
+    }
+  }
+  else{
+    //retry ? or retry by next cron..
+    return false;
+  }
+}
+function _civicrm_newweb_encodeline($in){
+  foreach($in as $line){
+    $o .= implode(',', $line)."\n";
+  }
+  return rtrim($o, "\n");
+}
+
+/**
+ * type: upload / response / transaction
+ */
+function _civicrm_newweb_decodeline($in, $type){
+  $o = array();
+  switch($type){
+    case 'response':
+      $key= array(
+        'MERCHANTNUMBER',
+        'REFNUMBER',
+        'CARDNUMBER',
+        'BRAND',
+        'EXPIREDATE',
+        'AMOUNT',
+        'REGULAR',
+        'ACTION',
+        'STATUS',
+        'MODE',
+        'RESPONSE',
+      );
+      break;
+    case 'transaction':
+      $key= array(
+        'MERCHANTNUMBER',
+        'REFNUMBER',
+        'ORGORDERNUMBER',
+        'HTTPCODE',
+        'PRC',
+        'SRC',
+        'BANKRESCODE',
+        'APPROVECODE',
+        'BATCHNUMBER',
+        'MERCHANTORDERNUMBER',
+        'MODE',
+      );
+      break;
+  }
+  $lines = explode("\n",$in);
+  foreach($lines as $l){
+    if($l){ // check if empty line
+      $value = explode(",", $l);
+      $o[] = array_combine($key, $value);
+    }
+  }
+  return $o;
+}
+function _civicrm_newweb_path($is_test){
+  if($is_test){
+    $newwebpath = file_create_path('newweb_test');
+  }
+  else{
+    $newwebpath = file_create_path('newweb');
+  }
+  file_check_directory($newwebpath, FILE_CREATE_DIRECTORY);
+  return $newwebpath;
+}
diff -ruN --exclude=.git civicrm-3.2.3/drupal/modules/civicrm_newweb/civicrm_newweb.info civicrm-netivism/drupal/modules/civicrm_newweb/civicrm_newweb.info
--- civicrm-3.2.3/drupal/modules/civicrm_newweb/civicrm_newweb.info	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/drupal/modules/civicrm_newweb/civicrm_newweb.info	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,6 @@
+name = Newweb functions
+description = Newweb payment functions for civicrm.
+package = CiviCRM
+dependencies[] = civicrm
+core = 6.x
+version = 3.15-dev
diff -ruN --exclude=.git civicrm-3.2.3/drupal/modules/civicrm_newweb/civicrm_newweb.install civicrm-netivism/drupal/modules/civicrm_newweb/civicrm_newweb.install
--- civicrm-3.2.3/drupal/modules/civicrm_newweb/civicrm_newweb.install	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/drupal/modules/civicrm_newweb/civicrm_newweb.install	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,76 @@
+<?php
+// $Id: devel.install,v 1.24.2.7 2009/07/30 19:38:48 weitzman Exp $
+/**
+ * @file
+ *   Install file for civicrm_newweb module.
+ */
+
+ 
+/**
+ * Implementation of hook_install()
+ */
+function civicrm_newweb_install() {
+  civicrm_initialize( );
+  require_once "CRM/Core/DAO.php";
+
+  // new payment processor
+  $sql = "INSERT INTO civicrm_payment_processor_type (name, title, description, is_active, is_default, user_name_label, password_label, signature_label, subject_label, class_name, url_site_default, url_api_default, url_recur_default, url_button_default, url_site_test_default, url_api_test_default, url_recur_test_default, url_button_test_default, billing_mode, is_recur, payment_type) VALUES ('Newweb', 'Newweb Payment', NULL, 1, 0, 'User Name', NULL, 'Signature', NULL, 'Payment_Newweb', 'https://maple.neweb.com.tw/NewebmPP/cdcard.jsp', NULL, 'https://maple.neweb.com.tw/NewebmPP/cdcard.jsp', NULL, 'https://maple.neweb.com.tw/NewebmPP/cdcard.jsp', NULL, 'https://maple.neweb.com.tw/NewebmPP/cdcard.jsp', NULL, 4, 1, 1)";
+  $sql = "INSERT INTO civicrm_payment_processor_type (name, title, description, is_active, is_default, user_name_label, password_label, signature_label, subject_label, class_name, url_site_default, url_api_default, url_recur_default, url_button_default, url_site_test_default, url_api_test_default, url_recur_test_default, url_button_test_default, billing_mode, is_recur, payment_type) VALUES ('Newweb', 'Newweb Payment', NULL, 1, 0, 'Store Name (Credit Card)', 'Store Name (EzPay)', 'Signature', NULL, 'Payment_Newweb', 'https://maple.neweb.com.tw/NewebmPP/cdcard.jsp', 'http://maple.neweb.com.tw:8080/CashSystemFrontEnd/', 'https://maple.neweb.com.tw/NewebmPP/cdcard.jsp', NULL, 'https://maple.neweb.com.tw/NewebmPP/cdcard.jsp', 'http://maple.neweb.com.tw:8080/CashSystemFrontEnd/', 'https://maple.neweb.com.tw/NewebmPP/cdcard.jsp', NULL, 4, 1, 1);";
+  CRM_Core_DAO::executeQuery($sql);
+  $dao = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_payment_processor_type WHERE name LIKE 'Newweb'");
+  $dao->fetch();
+  $ppt_id = $dao->id;
+
+  // new payment instrument
+  include_once "civicrm_newweb.module";
+  $new_instrument = _civicrm_newweb_instrument();
+  $dao = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_option_group WHERE name LIKE 'payment_instrument'");
+  $dao->fetch();
+  $instrument_id = $dao->id;
+  $dao = CRM_Core_DAO::executeQuery("SELECT value FROM civicrm_option_value WHERE option_group_id = $instrument_id ORDER BY value DESC");
+  $dao->fetch();
+  $next = $dao->value;
+  
+  foreach($new_instrument as $k => $v){
+    $next++;
+    $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_option_value WHERE option_group_id = $instrument_id AND name LIKE '$k'");
+    $dao->fetch();
+    if(!$dao->id){
+      $sql = "INSERT INTO civicrm_option_value (option_group_id, label, value, name, grouping, filter, is_default, weight, description, is_optgroup, is_reserved, is_active, component_id, visibility_id) VALUES ($instrument_id, '{$v['name']}', $next, '$k', NULL, $ppt_id, NULL, $next, '{$v['desc']}', 0, 0, 1, NULL, NULL)";
+      CRM_Core_DAO::executeQuery($sql);
+    }
+  }
+}
+
+/**
+ * Implementation of hook_uninstall().
+ */
+function civicrm_newweb_uninstall() {
+  civicrm_initialize();
+  require_once "CRM/Core/DAO.php";
+  CRM_Core_DAO::executeQuery("DELETE FROM civicrm_payment_processor_type WHERE name LIKE 'Newweb'");
+  CRM_Core_DAO::executeQuery("OPTIMIZE TABLE civicrm_payment_processor_type");
+
+  // we won't delete instrument for preserve contribution record
+}
+
+/**
+ * Implementation of hook_enable().
+ */
+function civicrm_newweb_enable() {
+  civicrm_initialize();
+  require_once "CRM/Core/DAO.php";
+  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor_type SET is_active = 1 WHERE name LIKE 'Newweb'");
+  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor SET is_active = 1 WHERE payment_processor_type LIKE 'Newweb'");
+}
+
+/**
+ * Implementation of hook_disable().
+ */
+function civicrm_newweb_disable() {
+  civicrm_initialize();
+  require_once "CRM/Core/DAO.php";
+  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor_type SET is_active = 0 WHERE name LIKE 'Newweb'");
+  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor SET is_active = 0 WHERE payment_processor_type LIKE 'Newweb'");
+}
+
diff -ruN --exclude=.git civicrm-3.2.3/drupal/modules/civicrm_newweb/civicrm_newweb.module civicrm-netivism/drupal/modules/civicrm_newweb/civicrm_newweb.module
--- civicrm-3.2.3/drupal/modules/civicrm_newweb/civicrm_newweb.module	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/drupal/modules/civicrm_newweb/civicrm_newweb.module	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,255 @@
+<?php
+define('NEWWEB_HOST', '61.221.66.144');
+define('NEWWEB_USER', 'rp_nncf');
+define('NEWWEB_PASS', '');
+
+function civicrm_newweb_init(){
+  $path = drupal_get_path('module', 'civicrm_newweb');
+  drupal_add_css("$path/civicrm_newweb.css");
+
+  if(strstr($_GET['q'], 'civicrm_newweb')){
+    $GLOBALS['conf']['cache'] = FALSE;
+  }
+}
+
+function civicrm_newweb_menu(){
+  return array(
+    'civicrm_newweb' => array(
+      /*'title'            => 'CiviCRM',*/
+      'access callback' => true,
+      'page callback' => 'civicrm_newweb_page',
+      'type' => MENU_CALLBACK,
+      'weight' => 0,
+    ),
+    'civicrm_newweb_error' => array(
+      /*'title'            => 'CiviCRM',*/
+      'access callback' => true,
+      'page callback' => 'civicrm_newweb_error',
+      'type' => MENU_CALLBACK,
+      'weight' => 0,
+    )
+  );
+}
+
+function civicrm_newweb_page(){
+  drupal_set_header('Pragma: no-cache');
+  drupal_set_header('Cache-Control: no-store, no-cache, must-revalidate');
+  drupal_set_header('Expires: 0');
+  $qfKey = $_GET['qfKey'];
+  $form = $_SESSION['newweb_form'];
+
+  if(isset($form) && !empty($form) && $qfKey == $form['#params']['qfKey'] ){
+    _civicrm_newweb_js_redirect();
+    $o .= '<div style="width:100%;height:20px;background:url('.base_path().'misc/progress.gif) repeat-x;">'.t('Processing').'</div>';
+    $o .= '<form action="'.$form['#action'].'" method="post" id="redirect-form">';
+    foreach($form as $k=>$p){
+      if($k[0] != '#'){
+        $o .= '<input type="hidden" name="'.$k.'" value="'.$p.'" />';
+      }
+    }
+    $o .= '</form>';
+    $_SESSION['civicrm_redirect'] = $form['#redirect'];
+    return $o;
+  }
+  elseif($_SESSION['civicrm_redirect']){
+    drupal_goto($_SESSION['civicrm_redirect']);
+  }
+  else{
+    // error message
+    // drupal_set_message();
+    // drupal_access_denied();
+    return 'error';
+  }
+}
+
+/**
+ * Implementation of hook_civicrm_buildForm()
+ */
+function civicrm_newweb_civicrm_buildForm($form_name, &$form){
+  switch($form_name){
+    case 'CRM_Contribute_Form_Contribution_ThankYou':
+      if(isset($_POST['final_result'])){
+        if($_POST['final_result'] == 1 && $_POST['final_return_PRC'] == 0 && $_POST['final_return_SRC'] == 0){
+          // success here
+        }
+        else{
+          // error here
+          require_once "CRM/Core/Payment/NewwebResponse.php";
+          $e = new CRM_Core_Payment_NewwebResponse;
+          $prc = $_POST['final_return_PRC'];
+          $src = $_POST['final_return_SRC'];
+          $brc = $_POST['final_return_BankRC'];
+          $order_num = $_POST['P_OrderNumber'];
+          $error = $e->response($prc,$src,$brc, $order_num);
+          // simulate message
+          $_SESSION['newweb']['error'] = $error;
+          drupal_goto('civicrm_newweb_error', "id=$order_num");
+        }
+      }
+      break;
+    case 'CRM_Contribute_Form_Contribution_Main':
+      // add newweb payment method selection
+      require_once "CRM/Core/DAO.php";
+      if($form->_paymentProcessor['payment_processor_type'] == 'Newweb'){
+        unset($_SESSION['newweb']);
+        unset($_SESSION['newweb_form']);
+        $dao = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_payment_processor_type WHERE name LIKE 'Newweb'");
+        $dao->fetch();
+        $ppt_id = $dao->id;
+        $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_option_value WHERE filter = $ppt_id AND is_active = 1");
+        $default = 'Credit Card';
+        $radios[1] = array('name' => $default, 'label' => ts($default));
+        while($dao->fetch()){
+          $radios[$dao->value] = array('name'=> $dao->name, 'label' => ts($dao->label), 'description' => $dao->description);
+
+        }
+        $form->addElement('hidden', 'newweb_instrument_id', 1);
+        drupal_add_js(_civicrm_newweb_js_form($radios), 'inline');
+      }
+      break;
+    case 'CRM_Event_Form_Registration_Register':
+      // add newweb payment method selection
+      require_once "CRM/Core/DAO.php";
+      if($form->_paymentProcessor['payment_processor_type'] == 'Newweb'){
+        unset($_SESSION['newweb']);
+        unset($_SESSION['newweb_form']);
+        $dao = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_payment_processor_type WHERE name LIKE 'Newweb'");
+        $dao->fetch();
+        $ppt_id = $dao->id;
+        $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_option_value WHERE filter = $ppt_id AND is_active = 1");
+        $default = 'Credit Card';
+        $radios[1] = array('name' => $default, 'label' => ts($default));
+        while($dao->fetch()){
+          $radios[$dao->value] = array('name'=> $dao->name, 'label' => ts($dao->label), 'description' => $dao->description);
+        }
+        $form->addElement('hidden', 'newweb_instrument_id', 1);
+        drupal_add_js(_civicrm_newweb_js_form($radios), 'inline');
+      }
+      break;
+    case 'CRM_Contribute_Form_ContributionPage_Amount':
+      _civicrm_newweb_js_contritweak();
+      break;
+  }
+}
+
+/**
+ * Implementation of hook_cron()
+ */
+function civicrm_newweb_cron(){
+  require_once("civicrm_newweb.inc");
+  $is_test = 1;
+  $hour = date('G');
+  $now = time();
+  $yesterday = $now - 86400;
+
+  if($hour >= 9 && $hour <= 12 && variable_get('civicrm_newweb_response', 0) < $yesterday){
+    // get yesterday modification result
+    if(civicrm_newweb_process_response($is_test)){
+      variable_set('civicrm_newweb_response', $now);
+    }
+  }
+  if($hour >= 13 && $hour <= 17 && variable_get('civicrm_newweb_transaction', 0) < $yesterday){
+    // get yesterday transaction result
+    if(civicrm_newweb_process_transaction($is_test)){
+      variable_set('civicrm_newweb_transaction', $now);
+    }
+  }
+  if($hour >= 15 && $hour <= 17 && variable_get('civicrm_newweb_uploaded', 0) < $yesterday){
+    // doing upload stuff
+    if(civicrm_newweb_process_upload($is_test)){
+      variable_set('civicrm_newweb_uploaded', $now);
+    }
+  }
+}
+
+function _civicrm_newweb_instrument(){
+  return array(
+    'ATM' => array('name' => 'ATM', 'desc' => ''),
+    'WEBATM' => array('name' => 'Web ATM', 'desc' => ''),
+    'CS' => array('name'=>'Convenient Store', 'desc'=>''),
+    'MMK' => array('name'=>'7-11 iBon / Family FamiPort / HiLife Life-ET','desc' => ''),
+    'ALIPAY' => array('name' => 'AliPay', 'desc' => ''),
+  );
+}
+
+function _civicrm_newweb_js_form($radios){
+  $output = "<div class='section'>";
+  $output .= "<div class='label'>".ts('Payment Instrument').'</div>';
+  $output .= "<div class='content'>";
+  foreach($radios as $value => $radio){
+    $checked = $value == 1 ? "checked='checked'" : '';
+    $radio['description'] = str_replace(array("\n","\r"), array('',''), $radio['description']);
+    $output .= "<div class='newweb-dummy-wrapper'><label><input type='radio' name='newweb_dummy' value='".$value."' class='form-radio' $checked />".$radio['label']."</label><div class='hover-item'>".$radio['description']."</div></div>";
+  }
+  $output .= '</div>';
+  $output .= "<div class='clear'></div>";
+  $output .= '</div>';
+  return '
+$(document).ready(function(){
+  // add radios
+  $("#crm-container form[name=Main] #intro_text, #crm-container form[name=Register] .paid_event-section").after("'.$output.'");
+  // modified exists recurring input
+
+  $("input[name=newweb_dummy]").click(function(){
+    var v = $(this).val();
+    $("input[name=newweb_instrument_id]").val(v);
+    if(v != 1){
+      $("#crm-container input[name=is_recur][value=0]").click();
+      $("#crm-container input[name=is_recur][value=1]").attr("disabled","disabled");
+    }
+    else{
+      $("#crm-container input[name=is_recur][value=1]").removeAttr("disabled");
+    }
+  });
+  
+  $(".hover-item").css({position:"absolute",display:"none"});
+  $(".newweb-dummy-wrapper").hover(function(){
+    $(this).children(".hover-item").show();
+  },function(){
+    $(this).children(".hover-item").hide();
+  });
+});  
+  ';
+}
+function _civicrm_newweb_js_contritweak(){
+  $js = '
+$(document).ready(function(){
+  $("input[name=\'recur_frequency_unit[week]\']").hide();
+  $("label[for=\'recur_frequency_unit[week]\']").hide();
+  $("input[name=\'recur_frequency_unit[day]\']").hide();
+  $("label[for=\'recur_frequency_unit[day]\']").hide();
+  $("input[name=\'recur_frequency_unit[year]\']").hide();
+  $("label[for=\'recur_frequency_unit[year]\']").hide();
+  $("#is_recur").click(function(){
+    $("#is_recur_interval").attr( "checked", false );
+  });
+  $("#is_recur_interval").parents("tr").hide();
+
+});  
+';
+  drupal_add_js($js, 'inline', 'footer');
+}
+
+function _civicrm_newweb_js_redirect(){
+  $js = '
+$(document).ready(function(){
+  $("#redirect-form").submit();
+});
+';
+  drupal_add_js($js, 'inline');
+}
+
+function civicrm_newweb_error(){
+  $msg = $_SESSION['newweb']['error'];
+  if(!count($msg)){
+    drupal_access_denied();
+  }
+  $output .= '<div class="newweb-error">';
+  $output .= '<div class="newweb-error-first">'.array_shift($msg).'</div>';
+  foreach($msg as $m){
+    $items[] = $m;
+  }
+  $output .= theme('item_list', $items);
+  $output .= '</div>';
+  return $output;
+}
diff -ruN --exclude=.git civicrm-3.2.3/extern/gwipn.php civicrm-netivism/extern/gwipn.php
--- civicrm-3.2.3/extern/gwipn.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/extern/gwipn.php	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,28 @@
+<?php
+session_start();
+require_once '../civicrm.config.php';
+require_once 'CRM/Core/Config.php';
+$config =& CRM_Core_Config::singleton();
+require_once 'CRM/Core/Error.php';
+if(empty($_POST)){
+   CRM_Core_Error::debug_log_message( "Could not find POST data from payment server" );
+   echo "Could not find POST data from payment server";
+}
+else{
+  require_once 'CRM/Utils/Array.php';
+  $value = CRM_Utils_Array::value('module', $_GET);
+  require_once 'CRM/Core/Payment/GWIPN.php';
+  $ipn = new CRM_Core_Payment_GWIPN();
+  switch ( $value ) {
+    case 'contribute':
+     $ipn->main('contribute');
+     break;
+    case 'event':
+     $ipn->main('event');
+     break;
+    default:
+     CRM_Core_Error::debug_log_message( "Could not get module name from request url" );
+     echo "Could not get module name from request url";
+     break;
+  }
+}
diff -ruN --exclude=.git civicrm-3.2.3/extern/ipn.php civicrm-netivism/extern/ipn.php
--- civicrm-3.2.3/extern/ipn.php	2010-12-30 17:48:14.000000000 +0800
+++ civicrm-netivism/extern/ipn.php	2010-12-30 17:38:10.000000000 +0800
@@ -75,3 +75,4 @@
  }
 
 
+
diff -ruN --exclude=.git civicrm-3.2.3/extern/newwebipn.php civicrm-netivism/extern/newwebipn.php
--- civicrm-3.2.3/extern/newwebipn.php	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/extern/newwebipn.php	2010-12-30 17:38:10.000000000 +0800
@@ -0,0 +1,64 @@
+<?php
+/*
+function lsg($input){
+  ob_start();
+  print_r($input);
+  $content = ob_get_contents();
+  ob_end_clean();
+  file_put_contents("/tmp/log-newweb.txt", $content, FILE_APPEND);
+}
+
+file_put_contents("/tmp/log-newweb.txt", '');
+ */
+require_once '../civicrm.config.php';
+require_once 'CRM/Core/Config.php';
+require_once 'CRM/Core/BAO/PaymentProcessor.php';
+require_once "CRM/Core/DAO.php";
+require_once 'CRM/Contribute/DAO/Contribution.php';
+$config =& CRM_Core_Config::singleton();
+
+//lsg($_POST);
+if($_GET['contributionID'] && is_numeric($_GET['contributionID']) && !empty($_POST)){
+  $cid = $_GET['contributionID'];
+  if($cid == $_POST['OrderNumber']){
+    $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_contribution_newweb WHERE order_num = $cid");
+    $dao->fetch();
+    if(!$dao->order_num){
+      $contribution =& new CRM_Contribute_DAO_Contribution( );
+      $contribution->id = $cid;
+      if ( $contribution->find( true ) ) {
+        /*
+        $paymentProcessorID = CRM_Core_DAO::getFieldValue( 'CRM_Contribute_DAO_ContributionPage',$contribution->contribution_page_id,'payment_processor_id' );
+        $paymentProcessor = CRM_Core_BAO_PaymentProcessor::getPayment( $paymentProcessorID, $contribution->is_test ? 'test' : 'live' );
+        $signature = $paymentProcessor['signature'];
+        $checksum = md5($_POST['MerchantNumber'].$_POST['OrderNumber'].$_POST['PRC'].$_POST['SRC'].$signature.$_POST['Amount']);
+        if($checksum == $_POST['CheckSum']){
+         */
+        CRM_Core_DAO::executeQuery("INSERT INTO civicrm_contribution_newweb (order_num,prc,src,bankrc,approvalcode) VALUES ($cid,{$_POST['PRC']},{$_POST['SRC']},'{$_POST['BankResponseCode']}','{$_POST['ApprovalCode']}')");
+        /*
+        }
+         */
+      }
+    }
+  }
+}
+
+require_once 'CRM/Utils/Array.php';
+$value = CRM_Utils_Array::value( 'module', $_GET );
+require_once 'CRM/Core/Payment/NewwebIPN.php';
+$NewwebIPN = new CRM_Core_Payment_NewwebIPN( );
+
+switch ( $value ) {
+ case 'contribute':
+     $NewwebIPN->main( 'contribute' );
+     break;
+ case 'event':
+     $NewwebIPN->main( 'event' );
+     break;
+ default:
+     require_once 'CRM/Core/Error.php';
+     CRM_Core_Error::debug_log_message( "Could not get module name from request url" );
+     echo "Could not get module name from request url<p>";
+     break;
+ }
+
diff -ruN --exclude=.git civicrm-3.2.3/packages/ckeditor/plugins/stylescombo/styles/default.js civicrm-netivism/packages/ckeditor/plugins/stylescombo/styles/default.js
--- civicrm-3.2.3/packages/ckeditor/plugins/stylescombo/styles/default.js	1970-01-01 08:00:00.000000000 +0800
+++ civicrm-netivism/packages/ckeditor/plugins/stylescombo/styles/default.js	2010-12-30 17:38:09.000000000 +0800
@@ -0,0 +1,6 @@
+﻿/*
+Copyright (c) 2003-2010, CKSource - Frederico Knabben. All rights reserved.
+For licensing, see LICENSE.html or http://ckeditor.com/license
+*/
+
+CKEDITOR.stylesSet.add('default',[{name:'Blue Title',element:'h3',styles:{color:'Blue'}},{name:'Red Title',element:'h3',styles:{color:'Red'}},{name:'Marker: Yellow',element:'span',styles:{'background-color':'Yellow'}},{name:'Marker: Green',element:'span',styles:{'background-color':'Lime'}},{name:'Big',element:'big'},{name:'Small',element:'small'},{name:'Typewriter',element:'tt'},{name:'Computer Code',element:'code'},{name:'Keyboard Phrase',element:'kbd'},{name:'Sample Text',element:'samp'},{name:'Variable',element:'var'},{name:'Deleted Text',element:'del'},{name:'Inserted Text',element:'ins'},{name:'Cited Work',element:'cite'},{name:'Inline Quotation',element:'q'},{name:'Language: RTL',element:'span',attributes:{dir:'rtl'}},{name:'Language: LTR',element:'span',attributes:{dir:'ltr'}},{name:'Image on Left',element:'img',attributes:{style:'padding: 5px; margin-right: 5px',border:'2',align:'left'}},{name:'Image on Right',element:'img',attributes:{style:'padding: 5px; margin-left: 5px',border:'2',align:'right'}}]);
diff -ruN --exclude=.git civicrm-3.2.3/packages/jquery/plugins/jquery.autocomplete.js civicrm-netivism/packages/jquery/plugins/jquery.autocomplete.js
--- civicrm-3.2.3/packages/jquery/plugins/jquery.autocomplete.js	2010-12-30 17:48:13.000000000 +0800
+++ civicrm-netivism/packages/jquery/plugins/jquery.autocomplete.js	2010-12-30 17:38:09.000000000 +0800
@@ -89,7 +89,7 @@
 	});
 	
 	// only opera doesn't trigger keydown multiple times while pressed, others don't work with keypress at all
-	$input.bind(($.browser.opera ? "keypress" : "keydown") + ".autocomplete", function(event) {
+	$input.bind(($.browser.opera ? "keypress" : "keyup.autocomplete text") + ".autocomplete", function(event) {
 		// track last key pressed
 		lastKeyPressCode = event.keyCode;
 		switch(event.keyCode) {
@@ -765,4 +765,4 @@
 	field.focus();
 };
 
-})(jQuery);
\ No newline at end of file
+})(jQuery);
diff -ruN --exclude=.git civicrm-3.2.3/packages/jquery/plugins/jquery.tokeninput.js civicrm-netivism/packages/jquery/plugins/jquery.tokeninput.js
--- civicrm-3.2.3/packages/jquery/plugins/jquery.tokeninput.js	2010-12-30 17:48:13.000000000 +0800
+++ civicrm-netivism/packages/jquery/plugins/jquery.tokeninput.js	2010-12-30 17:38:09.000000000 +0800
@@ -17,7 +17,7 @@
         noResultsText: "No results",
         searchingText: "Searching...",
         searchDelay: 600,
-        minChars: 1,
+        minChars: 1,
         tokenLimit: null,
         jsonContainer: null,
         method: "GET",
@@ -171,10 +171,10 @@
                   return true;
 
                 default:
-                    if(is_printable_character(event.keyCode)) {
+                    //if(is_printable_character(event.keyCode)) {
                       // set a timeout just long enough to let this function finish.
                       setTimeout(function(){do_search(false);}, 5);
-                    }
+                    //}
                     break;
             }
         });
diff -ruN --exclude=.git civicrm-3.2.3/templates/CRM/Contribute/Form/Contribution/Confirm.tpl civicrm-netivism/templates/CRM/Contribute/Form/Contribution/Confirm.tpl
--- civicrm-3.2.3/templates/CRM/Contribute/Form/Contribution/Confirm.tpl	2010-12-30 17:48:14.000000000 +0800
+++ civicrm-netivism/templates/CRM/Contribute/Form/Contribution/Confirm.tpl	2010-12-30 17:38:10.000000000 +0800
@@ -36,7 +36,7 @@
                 {if $paymentProcessor.payment_processor_type EQ 'Google_Checkout'} 
                     {ts}Click the <strong>Google Checkout</strong> button to checkout to Google, where you will select your payment method and complete the contribution.{/ts}
                 {else} 
-                    {ts 1=$paymentProcessor.processorName 2=$button}Click the <strong>%2</strong> button to go to %1, where you will select your payment method and complete the contribution.{/ts}
+                    {ts 1=$paymentProcessor.processorName 2=$button}Click the <strong>%2</strong> button to got to payment page, where you will enter the payment information then complete.{/ts}
                 {/if} 
             {elseif ! $is_monetary or $amount LE 0.0 or $is_pay_later}
                 {ts 1=$button}To complete this transaction, click the <strong>%1</strong> button below.{/ts}
diff -ruN --exclude=.git civicrm-3.2.3/templates/CRM/Contribute/Form/Contribution/ThankYou.tpl civicrm-netivism/templates/CRM/Contribute/Form/Contribution/ThankYou.tpl
--- civicrm-3.2.3/templates/CRM/Contribute/Form/Contribution/ThankYou.tpl	2010-12-30 17:48:14.000000000 +0800
+++ civicrm-netivism/templates/CRM/Contribute/Form/Contribution/ThankYou.tpl	2010-12-30 17:38:10.000000000 +0800
@@ -96,6 +96,10 @@
             {if !$membershipBlock AND $amount OR ( $priceSetID and $lineItem )}{ts}Contribution Information{/ts}{else}{ts}Membership Fee{/ts}{/if}
         </div>
         <div class="display-block">
+          {ts}Transaction ID{/ts}: <strong>{$trxn_id}</strong><br />
+          {if $payment_instrument}
+          {ts}Payment Instrument{/ts}: <strong>{$payment_instrument}</strong><br />
+          {/if}
         	{if $lineItem and $priceSetID}
     	    {if !$amount}{assign var="amount" value=0}{/if}
     	    {assign var="totalAmount" value=$amount}
@@ -117,11 +121,8 @@
             {if $receive_date}
             {ts}Date{/ts}: <strong>{$receive_date|crmDate}</strong><br />
             {/if}
-            {if $contributeMode ne 'notify' and $is_monetary and ! $is_pay_later and $trxn_id}
-    	    {ts}Transaction #{/ts}: {$trxn_id}<br />
-            {/if}
             {if $membership_trx_id}
-    	    {ts}Membership Transaction #{/ts}: {$membership_trx_id}
+            {ts}Membership Transaction #{/ts}: {$membership_trx_id}
             {/if}
         
             {* Recurring contribution / pledge information *}
