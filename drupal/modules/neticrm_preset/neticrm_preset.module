<?php
define('NETICRM_LIMIT_PATH', 'civicrm/import/contact::civicrm/contact/add');
define('NETICRM_BASE_URL', 'neticrm.tw');
define('NETICRM_GA', 'UA-28254338-1');

/**
 * Implementation of hook_init
 *
 * This function will limit user enter route and limitation.
 * We got to redirect user to help page even they have permissions.
 */
function neticrm_preset_init(){
  global $neticrm, $user;
  // we assume the civicrm db is the same with drupal from neticrm service, or we got to load full civicrm object..
  $count = db_result(db_query("SELECT COUNT(*) FROM {civicrm_contact} WHERE is_deleted = 0"));
  $member = variable_get("neticrm_preset_membership", array());
  if(!empty($member)){
    $percent = round(($count / $member['max']) * 100);
    $neticrm = array(
      'count' => $count,
      'max' => $member['max'],
      'percent' => $percent,
    );
  }
  drupal_add_css(drupal_get_path("module","neticrm_preset")."/neticrm_preset.css");
}

/**
 * Implementation of hook_perm
 *
 * The real administrator perm for neticrm
 */
function neticrm_preset_perm(){
  return array('administer neticrm');
}

/**
 * Implementation of hook_menu_alter
 *
 * Will alter the permission for some system menu items.
 */
function neticrm_preset_menu_alter(&$items){
  // system.module
  $items['admin/by-module']['access arguments'] = array('administer neticrm');
  $items['admin/settings/admin']['access arguments'] = array('administer neticrm');
  $items['admin/build/modules']['access arguments'] = array('administer neticrm');
  $items['admin/build/modules/uninstall']['access arguments'] = array('administer neticrm');
  $items['admin/settings/actions']['access arguments'] = array('administer neticrm');
  $items['admin/settings/actions/configure']['access arguments'] = array('administer neticrm');
  $items['admin/settings/actions/orphan']['access arguments'] = array('administer neticrm');
  $items['admin/settings/error-reporting']['access arguments'] = array('administer neticrm');
  $items['admin/settings/logging']['access arguments'] = array('administer neticrm');
  $items['admin/settings/performance']['access arguments'] = array('administer neticrm');
  $items['admin/settings/file-system']['access arguments'] = array('administer neticrm');
  $items['admin/settings/image-toolkit']['access arguments'] = array('administer neticrm');
  $items['admin/content/rss-publishing']['access arguments'] = array('administer neticrm');
  $items['admin/settings/site-maintenance']['access arguments'] = array('administer neticrm');
  $items['admin/settings/clean-urls']['access arguments'] = array('administer neticrm');
  $items['admin/reports/status']['access arguments'] = array('administer neticrm');
  $items['admin/reports/status/run-cron']['access arguments'] = array('administer neticrm');
  $items['admin/reports/status/php']['access arguments'] = array('administer neticrm');
  $items['admin/reports/status/sql']['access arguments'] = array('administer neticrm');

  // special case for theme
  /*
  $items['admin/build/themes']['page arguments'] = array('system_theme_settings');
  $items['admin/build/themes/select'] = array(
    'title' => 'List',
    'description' => 'Select the default theme.',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('system_themes_form', NULL),
    'access arguments' => array('administer neticrm'),
    'file' => drupal_load('module', 'system.admin.inc'),
  );
  $items['admin/build/themes/settings'] = array(
    'title' => 'Configure',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  */

  // node.module
  $items['admin/content/types']['access arguments'] = array('administer neticrm');
  $items['admin/content/types/add']['access arguments'] = array('administer neticrm');
  $items['admin/content/node-settings']['access arguments'] = array('administer neticrm');

  // block.module
  $items['admin/build/block']['access arguments'] = array('administer neticrm');
  $items['admin/build/block/list/js']['access arguments'] = array('administer neticrm');
  $items['admin/build/block/configure']['access arguments'] = array('administer neticrm');
  $items['admin/build/block/delete']['access arguments'] = array('administer neticrm');
  $items['admin/build/block/add']['access arguments'] = array('administer neticrm');

  // path.module
  $items['admin/build/path']['access arguments'] = array('administer neticrm');
  $items['admin/build/path/edit']['access arguments'] = array('administer neticrm');
  $items['admin/build/path/delete']['access arguments'] = array('administer neticrm');
  $items['admin/build/path/add']['access arguments'] = array('administer neticrm');

  // menu.module
  /*
  $items['admin/build/menu']['access arguments'] = array('administer neticrm');
  $items['admin/build/menu/add']['access arguments'] = array('administer neticrm');
  $items['admin/build/menu/settings']['access arguments'] = array('administer neticrm');
  $items['admin/build/menu-customize/%menu']['access arguments'] = array('administer neticrm');
  $items['admin/build/menu-customize/%menu/add']['access arguments'] = array('administer neticrm');
  $items['admin/build/menu-customize/%menu/edit']['access arguments'] = array('administer neticrm');
  $items['admin/build/menu-customize/%menu/delete']['access arguments'] = array('administer neticrm');
  $items['admin/build/menu/item/%menu_link/edit']['access arguments'] = array('administer neticrm');
  $items['admin/build/menu/item/%menu_link/reset']['access arguments'] = array('administer neticrm');
  $items['admin/build/menu/item/%menu_link/delete']['access arguments'] = array('administer neticrm');
  */

  // logintoboggan.module
  $items['admin/user/logintoboggan']['access arguments'] = array('administer neticrm');

  // localfix.module
  $items['admin/settings/localefix']['access arguments'] = array('administer neticrm');
  $items['admin/settings/devel']['access arguments'] = array('administer neticrm');

  // filter.module
  $items['admin/settings/filters']['access arguments'] = array('administer neticrm');
  $items['admin/settings/filters/add']['access arguments'] = array('administer neticrm');

  // imce.module
  $items['admin/settings/imce']['title'] = 'Image toolkit';

}

/**
 * Implementation of hook_form_alter
 *
 * hide the form elements in permissions setting page
 */
function neticrm_preset_form_alter(&$form, &$form_state, $form_id){
  if($form_id == 'user_admin_perm'){
    global $user;
    /*
    if($user->uid != 1 || !user_access('administer neticrm')){
      foreach($form['checkboxes'] as $rid => $cb){
        if(isset($cb['#options']['administer neticrm'])){
          unset($form['checkboxes'][$rid]['#options']['administer neticrm']);
        }
      }
      unset($form['permission']['administer neticrm']);
      foreach($form['permission'] as $k => $v){
        if($v['#value'] == 'neticrm_preset'){
          unset($form['permission'][$k]);
          break;
        }
      }
    }
    */
  }
}


/**
 * Override system theme select form theme
 */
/**
 * Theme function for the system themes form.
 *
 * @param $form
 *   An associative array containing the structure of the form.
 * @ingroup themeable
 */
function phptemplate_system_themes_form($form) {
  foreach (element_children($form) as $key) {
    // Only look for themes
    if (!isset($form[$key]['info'])) {
      continue;
    }
    if (!strstr($key, "neticrm")){
      unset($form[$key]);
      unset($form['status']['#options'][$key], $form['status'][$key]);
      unset($form['theme_default']['#options'][$key], $form['theme_default'][$key]);
      continue;
    }

    // Fetch info
    $info = $form[$key]['info']['#value'];

    // Localize theme description.
    $description = t($info['description']);
    // Make sure it is compatible and render the checkbox if so.
    if (isset($form['status']['#incompatible_themes_core'][$key])) {
      unset($form['status'][$key]);
      $status = theme('image', 'misc/watchdog-error.png', t('incompatible'), t('Incompatible with this version of Drupal core'));
      $description .= '<div class="incompatible">'. t('This version is incompatible with the !core_version version of Drupal core.', array('!core_version' => VERSION)) .'</div>';
    }
    elseif (isset($form['status']['#incompatible_themes_php'][$key])) {
      unset($form['status'][$key]);
      $status = theme('image', 'misc/watchdog-error.png', t('incompatible'), t('Incompatible with this version of PHP'));
      $php_required = $form['status']['#incompatible_themes_php'][$key];
      if (substr_count($php_required, '.') < 2) {
        $php_required .= '.*';
      }
      $description .= '<div class="incompatible">'. t('This theme requires PHP version @php_required and is incompatible with PHP version !php_version.', array('@php_required' => $php_required, '!php_version' => phpversion())) .'</div>';
    }
    else {
      $status = drupal_render($form['status'][$key]);
    }

    // Style theme info
    $theme = '<div class="theme-info"><h2>'. $info['name'] .'</h2><div class="description">'. $description .'</div></div>';

    // Build rows
    $row = array();
    $row[] = drupal_render($form[$key]['screenshot']);
    $row[] = $theme;
    $row[] = isset($info['version']) ? $info['version'] : '';
    $row[] = array('data' => $status, 'align' => 'center');
    if ($form['theme_default']) {
      $row[] = array('data' => drupal_render($form['theme_default'][$key]), 'align' => 'center');
      $row[] = array('data' => drupal_render($form[$key]['operations']), 'align' => 'center');
    }
    $rows[] = $row;
  }

  $header = array(t('Screenshot'), t('Name'), t('Version'), t('Enabled'), t('Default'), t('Operations'));
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}
/**
 * Theme the administer permissions page.
 *
 * @ingroup themeable
 */
function phptemplate_user_admin_perm($form) {
  $roles = user_roles();
  foreach (element_children($form['permission']) as $key) {
    // Don't take form control structures
    if (is_array($form['permission'][$key])) {
      $row = array();
      // Module name
      if (is_numeric($key)) {
        if($form['permission'][$key]['#value'] == 'neticrm_preset' && !user_access('administer neticrm')){
          // nothing
          unset($form['permission'][$key]);
        }
        else{
          $row[] = array('data' => t('@module module', array('@module' => drupal_render($form['permission'][$key]))), 'class' => 'module', 'id' => 'module-'. $form['permission'][$key]['#value'], 'colspan' => count($form['role_names']) + 1);
        }
      }
      else {
        if($key == 'administer neticrm' && !user_access('administer neticrm')){
          // hidden
          unset($form['permission'][$key]);
          foreach (element_children($form['checkboxes']) as $rid) {
            if (is_array($form['checkboxes'][$rid])) {
              $form['checkboxes'][$rid][$key]['#type'] = 'hidden';
            }
          }
        }
        else{
          $row[] = array('data' => drupal_render($form['permission'][$key]), 'class' => 'permission');
          foreach (element_children($form['checkboxes']) as $rid) {
            if (is_array($form['checkboxes'][$rid])) {
              $row[] = array('data' => drupal_render($form['checkboxes'][$rid][$key]), 'class' => 'checkbox', 'title' => $roles[$rid] .' : '. t($key));
            }
          }
        }
      }
      $rows[] = $row;
    }
  }
  $header[] = (t('Permission'));
  foreach (element_children($form['role_names']) as $rid) {
    if (is_array($form['role_names'][$rid])) {
      $header[] = array('data' => drupal_render($form['role_names'][$rid]), 'class' => 'checkbox');
    }
  }
  $output = theme('table', $header, $rows, array('id' => 'permissions'));
  $output .= drupal_render($form);
  return $output;
}

/**
 * Implementation of hook_menu
 */
function neticrm_preset_menu(){
  return array(
    'home' => array(
      'access callback' => true,
      'page callback' => 'neticrm_preset_home',
      'type' => MENU_CALLBACK,
      'weight' => 0,
      'file' => 'neticrm_preset.pages.inc',
    ),
  );
}

/**
 * Implementation of hook_theme
 */
function neticrm_preset_theme($existing, $type, $theme, $path){
  return array(
    'neticrm_preset_home' => array(
      'arguments' => array('items' => NULL),
      'file' => 'neticrm_preset.pages.inc',
    ),
    'neticrm_preset_home_item' => array(
      'arguments' => array('item' => NULL),
      'file' => 'neticrm_preset.pages.inc',
    ),
  );
}

/**
 * Implementation of hook_cron
 */
function neticrm_preset_cron(){
  $now = $_SERVER['REQUEST_TIME'];
  $membership = variable_get("neticrm_preset_membership", array());

  if((date('G') >= 2 && date('G') <= 5) || empty($membership)){
    if($now - $membership['last'] >= 86400){
      _neticrm_preset_member_info($membership);
    }
  }
}

/**
 * Implementation of hook_footer
 */
function neticrm_preset_block($op = 'list', $delta = 0, $edit = array()){
  if($op == 'list'){
    $blocks['footer'] = array(
      'info' => t('netiCRM info'),
      'region' => 'footer',
    );
  }
  elseif($op == 'view'){
    if($delta == 'footer'){
      global $neticrm;
      $member = variable_get("neticrm_preset_membership", array());

      if(user_access("access administration pages")){
        $item_left = array(
          "<strong>已使用 {$neticrm['percent']}%</strong>",
          "已使用 {$neticrm['count']}人，共{$neticrm['max']}人",
        );
        $item_right = array(
          $member['membership_name']."方案（since {$member['start_date']} ）",
        );
        if($member['end_date']){
          $item_right[] = "將於 {$member['end_date']} 到期";
        }
        else{
          $item_right[] = "此方案無限期";
        }

        $left = '<div class="neticrm-footer-left">'.theme('item_list', $item_left).'</div>';
        $right = '<div class="neticrm-footer-right">'.theme('item_list', $item_right).'</div>';
      }
      $center = '<div class="neticrm-footer-center">Powered by <a href="http://drupaltaiwan.org">Drupal</a> & <a href="http://civicrm.tw">CiviCRM</a><br>CiviCRM 是一套採用 <a href="http://www.gnu.org/licenses/agpl-3.0.html"><abbr title="GNU Affero General Public License">GNU AGPL</abbr></a> 授權的自由軟體，您所使用的中文優化版由 <a href="http://neticrm.tw"><abbr title="NETivism-由數位公益出發的社會企業">網絡行動科技</abbr></a> 提供</div>';

      $block['content'] = $left.$right.$center;
    }

    return $block;
  }
}

function _neticrm_preset_member_info($membership = NULL){
  global $base_url;
  if(!$membership){
    $membership = variable_get("neticrm_preset_membership", array());
  }
  $domain = str_replace(array('http://','https://'), "", $base_url);
  $url = "http://".NETICRM_BASE_URL."/neticrm/member/".$domain;
  
  $response = drupal_http_request($url);
  if($response->code == 200){
    $membership = unserialize($response->data);
    $membership['last'] = $now;
    variable_set("neticrm_preset_membership", $membership);
    return $membership;
  }
  return FALSE;
}

/**
 * Implementation of hook_footer
 */
function neticrm_preset_footer(){
  if(variable_get('neticrm_preset_tracking', 1)){
    $domain = $_SERVER['HTTP_HOST'];
    $ga = "<script type=\"text/javascript\">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', '".NETICRM_GA."']);
      _gaq.push(['_setDomainName', '{$domain}']);
      _gaq.push(['_trackPageview']);
            
      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  </script>";
  }

  if( variable_get('neticrm_preset_sharethis', 1) && in_array($_GET['q'], _neticrm_preset_st_path()) ){
    $domain = $_SERVER['HTTP_HOST'];
    $sharethis = '<script type="text/javascript">var switchTo5x=true;</script><script type="text/javascript" src="https://ws.sharethis.com/button/buttons.js"></script><script type="text/javascript">stLight.options({publisherGA:"'.NETICRM_GA.'"});</script>';
  }
  return $ga."\n".$sharethis;
}

/**
 * Implementation of hook_civicrm_pageRun
 */
function neticrm_preset_civicrm_pageRun(&$page){
  if(in_array($_GET['q'], _neticrm_preset_st_path()) && variable_get('neticrm_preset_sharethis', 1) ){
    // event info sharethis
    $page->assign('sharethis', "<span  class='st_facebook_vcount' displayText='Facebook'></span><span  class='st_twitter_vcount' displayText='Tweet'></span><span  class='st_plusone_vcount' ></span><span  class='st_fblike_vcount' ></span>" );
  }
}

function _neticrm_preset_st_path(){
  $p = array(
    'civicrm/event/info',
    'civicrm/contribute/transact',
  );
  return $p;
}
