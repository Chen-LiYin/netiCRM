<?php
/**
 * Implementation of hook_civicrm_buildForm().
 */
function civicrm_twaddress_civicrm_buildForm($formName, &$form) {
  static $add;
  // whatever, reorder. 
  $order = civicrm_twaddress_order();
  foreach ($form->_elements as $k => $e) {
    $name = $e->_attributes['name'];
    if(strstr($name, 'state_province')){
      $element = $form->getElement($name);
      $options = civicrm_twaddress_extract($element->_options);
      $a = 0;
      foreach($order as $k => $v){
        if($k == 0) continue;
        unset($element->_options[$k]);
        if(isset($options[$v])){
          $a++;
          $element->_options[$a] = $options[$v];
        }
      }
      break;
    }
  }

  // we don't support outside of civicrm yet
  if(arg(0) != 'civicrm'){
    return;
  }
  
  if($_GET['snippet']){
    return;
  }

  // we don't support ajax form
  $deny = array();
  if(in_array($formName,$deny)){
    return;
  }
  
  // we don't process report form
  if(strpos($formName, 'Report_Form')){
    return;
  }
  // we don't change form on step 2 / 3 / 4
  if(strpos($formName, 'Confirm') || strpos($formName, 'ThankYou')){
    return;
  }
  //
  $enable = TRUE;
  $form_name = $form->_attributes['name'];
  foreach ($form->_elements as $k => $e) {
    $name = $e->_attributes['name'];
    if(strstr($name, 'postal_code') && !strstr($name,'postal_code_suffix')){
      $key = _civicrm_twaddress_key($name);
      $override['zipName'][$key]['key'] = $name;
      $override['zipName'][$key]['default'] = $form->getElement($name)->_findValue($form->_defaultValues);
    }
    if(strstr($name, 'state_province')){
      $key = _civicrm_twaddress_key($name);
      $override['countyName'][$key]['key'] = $name;
      foreach($e->_options as $v){
        if($v['attr']['value']){
          $county_options[$v['attr']['value']] = $v['text'];
        }
      }
      $default = $form->getElement($name)->_findValue($form->_defaultValues);
      $default = $default ? $default : $_POST[$name];
      $override['countyName'][$key]['default'] = $county_options[$default];
    }
    if(strstr($name, 'city')){
      $key = _civicrm_twaddress_key($name);
      // hide field

      $default = $form->getElement($name)->_findValue($form->_defaultValues);
      $default = $default ? $default : $_POST[$name];
      $override['areaName'][$key]['key'] = '_'.$name;
      $override['areaName'][$key]['name'] = $name;
      $override['areaName'][$key]['default'] = $default;
    }
    if(strstr($name, 'country')){
      $enable = FALSE;
    }
  }

  if(count($override)>=3 && $enable){
    if(!$add){
      $path = drupal_get_path("module",'civicrm_twaddress');
      drupal_add_js($path."/twzipcode.js");
      $add = 1;
    }

    if(arg(1) == 'contribute' || arg(1) == 'event'){
      _civicrm_twaddress_grouping_js();
    }
    foreach($override['areaName'] as $k => $v){
      $count++;

      $insert = "<select name='{$override['areaName'][$k]['key']}' class='form-select'></select>";

      $js = '
      $(document).ready(function(){
        if( $("input[name=\''.$override['areaName'][$k]['name'].'\']").length ){
          $("'.$insert.'").insertAfter("input[name=\''.$override['areaName'][$k]['name'].'\']");
          $("input[name=\''.$override['areaName'][$k]['name'].'\']").hide();
          $("select[name=\''.$override['areaName'][$k]['key'].'\']").change(function(){
            var v = $(this).val();
            $("input[name=\''.$override['areaName'][$k]['name'].'\']").val(v);
          });
          $("input[name='.$override['zipName'][$k]['key'].']").addClass("readonly post-code");

          $("form[name='.$form_name.']").twzipcode({
            zipName:"'.$override['zipName'][$k]['key'].'",
            countyName:"'.$override['countyName'][$k]['key'].'",
            areaName:"'.$override['areaName'][$k]['key'].'",
            zipSel:"'.$override['zipName'][$k]['default'].'",
            countySel:"'.$override['countyName'][$k]['default'].'",
            areaSel:"'.$override['areaName'][$k]['default'].'"
          });
        }
      });
      ';
      drupal_add_js($js , 'inline');
    }
  }
}

function civicrm_twaddress_extract($options){
  foreach($options as $o){
    $return[$o['text']] = $o;
  }
  return $return;
}

function civicrm_twaddress_order(){
  return
  array(
    '', // for order 0
    '基隆市',
    '台北市',
    '新北市',
    '新竹市',
    '新竹縣',
    '桃園縣',
    '苗栗縣',
    '台中市',
    '彰化縣',
    '南投縣',
    '嘉義市',
    '嘉義縣',
    '雲林縣',
    '台南市',
    '高雄市',
    '屏東縣',
    '台東縣',
    '花蓮縣',
    '宜蘭縣',
    '澎湖縣',
    '金門縣',
    '連江縣',
    '南海諸島',
  );
}

function _civicrm_twaddress_key($name){
  preg_match('/\d/', $name, $matches);
  $key = is_numeric($matches[0]) ? $matches[0] : 1;

  return $key;
}

function _civicrm_twaddress_grouping_js(){
  $js = '
    $(document).ready(function(){
      // find a address group to collapsed to single line
      var ids = {};
      var addr_fields = $(".crm-section").filter(function(){
        var classes = $(this).attr("class").split(" ");
        for (var i=0; i<classes.length; i++) {
          if (classes[i].slice(0,14) == "state_province" || classes[i].slice(0, 4) == "city" || classes[i].slice(0, 11) == "postal_code") {
            var matches = classes[i].match(/\d+/);
            var rel = "g"+matches[0];
            $(this).attr("rel", rel);
            if(typeof(ids[rel]) == "undefined"){
              ids[rel] = 1;
            }
            else{
              ids[rel] = ids[rel]+1;
            }
            return true;
          }
        }
      });

      for(property in ids) {  
        if(ids[property] == 3){
          var id = property.replace("g", "");
          // this the right group
          $("[rel=\'"+property+"\']").each(function(){
            var classes = $(this).attr("class");
            if(!classes.match(/state_province/g)){
              var html = $(this).find(".content *").appendTo(".state_province-"+id+"-section .content");
              $(this).hide();
            }
          });
        }
      }
    });
  ';
  drupal_add_js($js , 'inline');
}
