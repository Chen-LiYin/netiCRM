<?php
define('CIVICRM_PARENT_RID', 1); // relationship type id
define('CIVICRM_PARENT_DIR', 'b_a'); // relationship id

/**
 * hook_civicrm_buildForm
 */
function civicrm_event_parent_civicrm_buildForm( $formName, &$form ) {
  // event registration form
  if ( $formName == 'CRM_Event_Form_Registration_Register' ) {
    civicrm_event_parent_civicrm_buildForm_regRegister( $formName, $form );
  }
  // event registration for additional participant
  if ( $formName == 'CRM_Event_Form_Registration_AdditionalParticipant' ) {
    civicrm_event_parent_civicrm_buildForm_regAdditional( $formName, $form );
  }

  // Profile create url
  if ( is_a( $form, 'CRM_Profile_Form_Edit' ) ) {
    $session = CRM_Core_Session::singleton( );
    if($_GET['event_id'] && is_numeric($_GET['event_id'])){
      $event_id = $_GET['event_id'];
      $session->set('event_id', $event_id, 'profile');
      $form->addElement( 'hidden', 'event_id', $_GET['event_id']);
    }
    elseif($session->get('event_id', 'profile')){
      $event_id = $session->get('event_id', 'profile');
      if($session->get('userID') && $session->get('ufID')){
         $mainID = $session->get('userID');
         drupal_goto( 'civicrm/event/register', "reset=1&id={$event_id}&cid=0&mainID={$mainID}");
      }
      $form->addElement( 'hidden', 'event_id', $event_id);
    }

    $parent_gid = variable_get('civicrm_event_parent_gid', array());
    require_once("api/v2/Event.php");
    $params = array('id' => $event_id);
    $result = civicrm_event_get($params);
    if(!$result['is_error'] && $parent_gid[$event_id]){
      $relation = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_relationship_type WHERE id = ".$parent_gid[$event_id]);
      $relation->fetch();
      drupal_set_title($result['title']." - ".t("!relation profile form", array('!relation' => $relation->label_b_a)));
    }
  }

  // Event administration form
  if ( $formName == 'CRM_Event_Form_ManageEvent_Registration'){
    $sql = "SELECT id, title FROM  civicrm_uf_group WHERE is_active = 1 AND group_type LIKE '%Individual%'";
    $dao = CRM_Core_DAO::executeQuery( $sql);
    $options[0] = t('- select -');
    while($dao->fetch()){
      $options[$dao->id] = $dao->title;
    }
    $form->addElement( 'select', 'parent_gid', t( 'Parent Profile' ), $options );

    // set default
    $parent_gid = variable_get('civicrm_event_parent_gid', array());
    $event_id = $form->getVar('_id');
    if($parent_gid[$event_id]){
      $form->setDefaults( array('parent_gid' => $parent_gid) );
    }
  }
}

function civicrm_event_parent_civicrm_buildForm_regRegister( $formName, &$form ) {

  $cid = CRM_Utils_Request::retrieve( 'cid', 'Integer', $form, false, null, $_REQUEST);
  $session = CRM_Core_Session::singleton( );
  $contact_id = $session->get( 'userID' );
  $uid = $session->get( 'ufID' );
  if($contact_id){
    $display_name = CRM_Core_DAO::singleValueQuery("SELECT display_name FROM civicrm_contact WHERE id = {$contact_id}");
  }

  $event_id = $form->getVar( '_eventId' );
  $civicrm_event_parent_gid = variable_get('civicrm_event_parent_gid', array());
  $mainID = CRM_Utils_Request::retrieve( 'mainID', 'Integer', $form, false, null, $_REQUEST );

  $_id = $_GET['id'];


  if(!empty($civicrm_event_parent_gid[$event_id])){
    $relation = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_relationship_type WHERE id = ".$civicrm_event_parent_gid[$event_id]);
    $relation->fetch();

    // handling redirection
    if($cid === NULL && $contact_id && $uid){
      drupal_goto('civicrm/event/register', 'reset=1&cid=0&mainID='.$contact_id.'&id='.$event_id);
    }
    if( !$mainID ){
      // redirect to parent profile create form
      if(!$uid){
        drupal_goto('civicrm/profile/create','gid='.$civicrm_event_parent_gid[$event_id].'&reset=1&event_id='.$event_id);
      }
    }
    // now the real registration process
    else {
      $status_msg = array(
        '!name' => $display_name,
        '!relationship' => $relation->label_b_a,
        '!register_link' => url("civicrm/event/register", array("query" => "reset=1&cid=$contact_id&id=$event_id")),
      );
      if($uid){
        $status = t("Hello !name! After finish this form, we will create a relashionship between you and belows. If you are not below's !relationship, or you would like to register for yourself, please <a href=\"!register_link\">use alternative form to register this event</a>.", $status_msg);
      }
      else{
        $status = t("Please continue enter this form. We suppose you are !relationship of belows, then we will create relationship between you and belows. If you would like to register for yourself, please <a href=\"!register_link\">use alternative form to register this event</a>.", $status_msg);
      }
      CRM_Core_Session::setStatus($status);
      drupal_set_title(drupal_get_title()." - ".t("!relation profile form", array('!relation' => $relation->label_a_b)));
      $rTypeID  = CIVICRM_PARENT_RID; 
      $rTypeDir = CIVICRM_PARENT_DIR;
      if ( $rTypeID ) {
        $form->set( 'mainID'  , $mainID   );
        $form->set( 'rTypeID' , $rTypeID  );
        $form->set( 'rTypeDir', $rTypeDir );
      }

      // now set the various defaults
      // basically name and email and number of children
      $children = _civicrm_event_parent_get_children_info( $mainID );
      $form->set( 'parentChildren', $children );

      if ( empty( $children ) ) {
        $defaults = civicrm_event_parent_set_default($mainID, $form, 'parent');
        $form->setDefaults( $defaults);
      }
      elseif($uid){
        $defaults = civicrm_event_parent_set_default($children[0], $form, 'child');
        $form->setDefaults( $defaults );
      }
      $session->resetScope('profile');
    }
  }
}

function civicrm_event_parent_civicrm_buildForm_regAdditional( $formName, &$form ) {
  $event_id = $form->getVar( '_eventId' );
  $civicrm_event_parent_gid = variable_get('civicrm_event_parent_gid', array());

  if(!empty($civicrm_event_parent_gid[$event_id])){
    $relation = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_relationship_type WHERE id = ".$civicrm_event_parent_gid[$event_id]);
    $relation->fetch();
    $children = $form->get( 'parentChildren' );
    drupal_set_title(drupal_get_title()." - ".t("!relation profile form", array('!relation' => $relation->label_a_b)));
    if ( ! empty( $children ) ) {
      $childNum = substr( $form->getVar( '_name' ), 12 );

      $defaults = array( );
      $defaults['first_name'] = $children[$childNum]['first_name'];
      $defaults['last_name' ] = $children[$childNum]['last_name' ];
      $defaults['email-5'   ] = $children[$childNum]['email'     ];
      $form->setDefaults( $defaults );
    }
  }
}

function civicrm_event_parent_civicrm_postProcess( $class, &$form ) {
  if ( is_a( $form, 'CRM_Event_Form_Registration_Confirm' ) ) {
    return civicrm_event_parent_civicrm_postProcess_regConfirm( $class, $form );
  }

  if ( is_a( $form, 'CRM_Profile_Form_Edit' ) ) {
    return civicrm_event_parent_civicrm_postProcess_profileEdit( $class, $form );
  }
  if ( is_a( $form, 'CRM_Event_Form_ManageEvent_Registration') ){
    return civicrm_event_parent_civicrm_postProcess_parentProfile( $class, $form );
  }
}

function civicrm_event_parent_civicrm_postProcess_regConfirm( $class, &$form ) {
  if ( $form->get( 'mainID' ) ) {
    $mainID   = $form->get( 'mainID'   );
    $rTypeID  = $form->get( 'rTypeID'  );
    $rTypeDir = $form->get( 'rTypeDir' );

    // get the participantIDS
    $participantIDs = $form->getVar( '_participantIDS' );
    
    $pIDString = implode( ',', $participantIDs );

    // get all the contactIDs for these participants
    $sql = "
SELECT contact_id
FROM   civicrm_participant
WHERE  id IN ( $pIDString )
";

    if ( $rTypeDir == 'a_b' ) {
      $mainLabel  = 'a';
      $otherLabel = 'b';
    }
    else {
      $mainLabel  = 'b';
      $otherLabel = 'a';
    }

    $dao = CRM_Core_DAO::executeQuery( $sql );
    require_once 'api/v2/Relationship.php';
    while ( $dao->fetch( ) ) {
      // create the relationship
      $params = array( "contact_id_{$mainLabel}"  => $mainID,
                       "contact_id_{$otherLabel}" => $dao->contact_id,
                       'relationship_type_id'     => $rTypeID,
                       'is_active'                => 1,
                       );
      civicrm_relationship_create( $params );
    }
  }
}

function civicrm_event_parent_civicrm_postProcess_profileEdit( $class, &$form ) {
  // get the contactID of the newly created contact (or existing one)
  // and redirect to event registration page
  $mainID = $form->getVar( '_id' );
  $event_id = CRM_Utils_Request::retrieve( 'event_id', 'Integer', $form, false, null, $_REQUEST);

  if ( $mainID && $event_id) {
    $url = CRM_Utils_System::url( 'civicrm/event/register', "reset=1&id={$event_id}&cid=0&mainID={$mainID}" );
    CRM_Utils_System::redirect( $url );
  }
}

function civicrm_event_parent_civicrm_postProcess_parentProfile( $class, &$form ) {
  $params = $form->exportValues();
  $event_id = $form->getVar( '_id' );
  $civicrm_event_parent_gid = variable_get('civicrm_event_parent_gid', array());

  if ( $event_id && $params['parent_gid']){
    $civicrm_event_parent_gid[$event_id] = $params['parent_gid'];
    variable_set('civicrm_event_parent_gid', $civicrm_event_parent_gid);
  }
  else{
    unset($civicrm_event_parent_gid[$event_id]);
    variable_set('civicrm_event_parent_gid', $civicrm_event_parent_gid);
  }
}

function civicrm_event_parent_set_default($cid, &$form, $type){
  require_once("api/v2/Contact.php");
  $fields = array_keys($form->_fields);
  $params = array('contact_id' => $cid);
  $retrieved = & civicrm_contact_get( $params );

  $fields = array_keys($form->_fields);
  foreach($fields as $v){
    if(strstr($v, 'phone')){
      list($p, $t, $phone_type) = explode('-', $v);
      $phone_types[$phone_type] = $v;
    }
  }
  if ( !civicrm_error( $retrieved ) ) {
    $contact = $retrieved[$cid];
    $defaults = array(); 
    if($type == 'child'){
      foreach($contact as $k => $v){
        if($k == 'phone') {
          foreach($phone_types as $ptid => $form_name){
            if($ptid == $contact['phone_type_id']){
              $defaults[$form_name] = $v;
            }
          }
        }
        else{
          foreach($fields as $f){
            if(strpos($f, $k) === 0){
              $defaults[$f] = $v;
            }
          }
        }
      }
      $defaults['gender'] = $contact['gender_id'];
    }
    else{
      $defaults['postal_code-1'] = $contact['postal_code'];
      $defaults['state_province-1'] = $contact['state_province_id'];
      $defaults['_city-1'] = $contact['city'];
      $defaults['street_address-1'] = $contact['street_address'];
      foreach($phone_types as $ptid => $form_name){
        if($ptid == $contact['phone_type_id']){
          $defaults[$form_name] = $contact['phone'];
        }
      }
    }
    return $defaults;
  }
}

function _civicrm_event_parent_get_children_info( $contactID ) {
  $sql = "
SELECT     r.contact_id_a as child_id
FROM       civicrm_contact c
INNER JOIN civicrm_relationship  r ON c.id = r.contact_id_b
WHERE      c.id = %1
AND        r.relationship_type_id = ".CIVICRM_PARENT_RID."
AND        r.is_active = 1
";
  $params = array( 1 => array( $contactID, 'Integer' ) );
  $dao = CRM_Core_DAO::executeQuery( $sql, $params );

  $children = array( );
  while ( $dao->fetch( ) ) {
      $children[] = $dao->child_id;
  }
  
  return $children;
}
