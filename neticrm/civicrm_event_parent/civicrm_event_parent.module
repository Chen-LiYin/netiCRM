<?php
define('CIVICRM_PARENT_RID', 1); // relationship type id
define('CIVICRM_PARENT_DIR', 'b_a'); // relationship id

function _civicrm_event_parent_get_children_info( $contactID ) {
    $sql = "
SELECT     r.contact_id_a as child_id
FROM       civicrm_contact c
INNER JOIN civicrm_relationship  r ON c.id = r.contact_id_b
WHERE      c.id = %1
AND        r.relationship_type_id = ".CIVICRM_PARENT_RID."
AND        r.is_active = 1
";
    $params = array( 1 => array( $contactID, 'Integer' ) );
    $dao = CRM_Core_DAO::executeQuery( $sql, $params );

    $children = array( );
    while ( $dao->fetch( ) ) {
        $children[] = $dao->child_id;
    }
    
    return $children;
}

function civicrm_event_parent_civicrm_buildForm( $formName, &$form ) {
    if ( $formName == 'CRM_Event_Form_Registration_Register' ) {
        civicrm_event_parent_civicrm_buildForm_regRegister( $formName, $form );
    }

    if ( $formName == 'CRM_Event_Form_Registration_AdditionalParticipant' ) {
        civicrm_event_parent_civicrm_buildForm_regAdditional( $formName, $form );
    }


    if ( is_a( $form, 'CRM_Profile_Form_Edit' ) ) {
        $session = CRM_Core_Session::singleton( );
        if($_GET['event_id'] && is_numeric($_GET['event_id'])){
            $event_id = $_GET['event_id'];
            $session->set('event_id', $event_id, 'profile');
            $form->addElement( 'hidden', 'event_id', $_GET['event_id']);
        }
        elseif($session->get('event_id', 'profile')){
            $event_id = $session->get('event_id', 'profile');
            if($session->get('userID') && $session->get('ufID')){
               $mainID = $session->get('userID');
               drupal_goto( 'civicrm/event/register', "reset=1&id={$event_id}&cid=0&mainID={$mainID}");
            }
            $form->addElement( 'hidden', 'event_id', $event_id);
        }
        require_once("api/v2/Event.php");
        $params = array('id' => $event_id);
        $result = civicrm_event_get($params);
        if(!$result['is_error']){
          drupal_set_title($result['title'].' - 家長資料');
        }
    }

    if ( $formName == 'CRM_Event_Form_ManageEvent_Registration'){
        $sql = "SELECT id, title FROM  civicrm_uf_group WHERE is_active = 1 AND group_type LIKE '%Individual%'";
        $dao = CRM_Core_DAO::executeQuery( $sql);
        $options[0] = ts('- select -');
        while($dao->fetch()){
          $options[$dao->id] = $dao->title;
        }
        $form->addElement( 'select', 'parent_gid', ts( 'Parent Profile' ), $options );

        // set default
        $parent_gid = variable_get('civicrm_event_parent_gid', array());
        $event_id = $form->getVar('_id');
        if($parent_gid[$event_id]){
          $form->setDefaults( array('parent_gid' => $parent_gid) );
        }
    }
}

function civicrm_event_parent_civicrm_buildForm_regRegister( $formName, &$form ) {
  $cid = CRM_Utils_Request::retrieve( 'cid', 'Integer', $form, false, null, $_REQUEST);
  $session = CRM_Core_Session::singleton( );
  $contact_id = $session->get( 'userID' );
  $uid = $session->get( 'ufID' );

  $event_id = $form->getVar( '_eventId' );
  $civicrm_event_parent_gid = variable_get('civicrm_event_parent_gid', array());
  $mainID = CRM_Utils_Request::retrieve( 'mainID', 'Integer', $form, false, null, $_REQUEST );

  if(!empty($civicrm_event_parent_gid[$event_id])){
    if($cid === NULL && $contact_id && $uid){
        drupal_goto('civicrm/event/register', 'reset=1&cid=0&mainID='.$contact_id.'&id='.$event_id);
    }
    if ( $mainID) {
      $statusMessage = "請您在下面填入孩子的資訊。若您不是家長，請不要填寫資料，直接".l("到這裡進行報名", "civicrm/event/register", array("query" => "reset=1&cid=$contact_id&id=$event_id"));
      CRM_Core_Session::setStatus( $statusMessage );
      drupal_set_title(drupal_get_title()." - 學員資料填寫");
      $rTypeID  = CIVICRM_PARENT_RID; 
      $rTypeDir = CIVICRM_PARENT_DIR;
      if ( $rTypeID ) {
        $form->set( 'mainID'  , $mainID   );
        $form->set( 'rTypeID' , $rTypeID  );
        $form->set( 'rTypeDir', $rTypeDir );
      }

      // now set the various defaults
      // basically name and email and number of children
      $children = _civicrm_event_parent_get_children_info( $mainID );
      $form->set( 'parentChildren', $children );

      if ( empty( $children ) ) {
        $defaults = civicrm_event_parent_set_default($mainID, $form, 'parent');
        $form->setDefaults( $defaults);
      }
      elseif($uid){
        $defaults = civicrm_event_parent_set_default($children[0], $form, 'child');
        $form->setDefaults( $defaults );
      }
      $session->resetScope('profile');
    }
    else{
      // redirect to parent profile create form
      global $user;
      if($_GET['action'] != 'preview' && !$user->uid){
        drupal_goto('civicrm/profile/create','gid='.$civicrm_event_parent_gid[$event_id].'&reset=1&event_id='.$event_id);
      }
    }
  }
}

function civicrm_event_parent_civicrm_buildForm_regAdditional( $formName, &$form ) {
    $event_id = $form->getVar( '_eventId' );
    $civicrm_event_parent_gid = variable_get('civicrm_event_parent_gid', array());
    if(!empty($civicrm_event_parent_gid[$event_id])){
        $children = $form->get( 'parentChildren' );
        drupal_set_title(drupal_get_title()." - 學員資料填寫");
        if ( ! empty( $children ) ) {
            $childNum = substr( $form->getVar( '_name' ), 12 );

            $defaults = array( );
            $defaults['first_name'] = $children[$childNum]['first_name'];
            $defaults['last_name' ] = $children[$childNum]['last_name' ];
            $defaults['email-5'   ] = $children[$childNum]['email'     ];
            $form->setDefaults( $defaults );
        }
    }
}

function civicrm_event_parent_civicrm_postProcess( $class, &$form ) {
    if ( is_a( $form, 'CRM_Event_Form_Registration_Confirm' ) ) {
        return civicrm_event_parent_civicrm_postProcess_regConfirm( $class, $form );
    }

    if ( is_a( $form, 'CRM_Profile_Form_Edit' ) ) {
        return civicrm_event_parent_civicrm_postProcess_profileEdit( $class, $form );
    }
    if ( is_a( $form, 'CRM_Event_Form_ManageEvent_Registration') ){
        return civicrm_event_parent_civicrm_postProcess_parentProfile( $class, $form );
    }
}

function civicrm_event_parent_civicrm_postProcess_regConfirm( $class, &$form ) {
    if ( $form->get( 'mainID' ) ) {
        $mainID   = $form->get( 'mainID'   );
        $rTypeID  = $form->get( 'rTypeID'  );
        $rTypeDir = $form->get( 'rTypeDir' );

        // get the participantIDS
        $participantIDs = $form->getVar( '_participantIDS' );
        
        $pIDString = implode( ',', $participantIDs );

        // get all the contactIDs for these participants
        $sql = "
SELECT contact_id
FROM   civicrm_participant
WHERE  id IN ( $pIDString )
";

        if ( $rTypeDir == 'a_b' ) {
            $mainLabel  = 'a';
            $otherLabel = 'b';
        } else {
            $mainLabel  = 'b';
            $otherLabel = 'a';
        }

        $dao = CRM_Core_DAO::executeQuery( $sql );
        require_once 'api/v2/Relationship.php';
        while ( $dao->fetch( ) ) {
            // create the relationship
            $params = array( "contact_id_{$mainLabel}"  => $mainID,
                             "contact_id_{$otherLabel}" => $dao->contact_id,
                             'relationship_type_id'     => $rTypeID,
                             'is_active'                => 1,
                             );
            civicrm_relationship_create( $params );
        }
    }
}

function civicrm_event_parent_civicrm_postProcess_profileEdit( $class, &$form ) {
    // get the contactID of the newly created contact (or existing one)
    // and redirect to event registration page
    $mainID = $form->getVar( '_id' );
    $event_id = CRM_Utils_Request::retrieve( 'event_id', 'Integer', $form, false, null, $_REQUEST);

    if ( $mainID && $event_id) {
        $url = CRM_Utils_System::url( 'civicrm/event/register', "reset=1&id={$event_id}&cid=0&mainID={$mainID}" );
        CRM_Utils_System::redirect( $url );
    }
}

function civicrm_event_parent_civicrm_postProcess_parentProfile( $class, &$form ) {
  $params = $form->exportValues();
  $event_id = $form->getVar( '_id' );
  $civicrm_event_parent_gid = variable_get('civicrm_event_parent_gid', array());

  if ( $event_id && $params['parent_gid']){
      $civicrm_event_parent_gid[$event_id] = $params['parent_gid'];
      variable_set('civicrm_event_parent_gid', $civicrm_event_parent_gid);
  }
  else{
      unset($civicrm_event_parent_gid[$event_id]);
      variable_set('civicrm_event_parent_gid', $civicrm_event_parent_gid);
  
  }
}

function civicrm_event_parent_set_default($cid, &$form, $type){
  require_once("api/v2/Contact.php");
  $fields = array_keys($form->_fields);
  $params = array('contact_id' => $cid);
  /*
  foreach($fields as $f){
    if(strpos($f, 'custom') === 0){
      $params['return_'.$f] = 1;
    }
  }
  */
  $retrieved = & civicrm_contact_get( $params );

  if ( !civicrm_error( $retrieved ) ) {
    $contact = $retrieved[$cid];
    $defaults = array(); 
    if($type == 'child'){
      foreach($contact as $k => $v){
        if($k == 'phone') continue;
        foreach($fields as $f){
          if(strpos($f, $k) === 0){
            $defaults[$f] = $v;
          }
        }
      }
      $defaults['gender'] = $contact['gender_id'];
    }
    else{
      $defaults['postal_code-1'] = $contact['postal_code'];
      $defaults['state_province-1'] = $contact['state_province_id'];
      $defaults['_city-1'] = $contact['city'];
      $defaults['street_address-1'] = $contact['street_address'];
    }
    return $defaults;
  }
}
